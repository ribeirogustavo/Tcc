
# 1 "vip.c"

# 49 "C:\Program Files\Microchip\xc8\v1.34\include\pic16f628a.h"
extern volatile unsigned char INDF @ 0x000;

asm("INDF equ 00h");



extern volatile unsigned char TMR0 @ 0x001;

asm("TMR0 equ 01h");



extern volatile unsigned char PCL @ 0x002;

asm("PCL equ 02h");



extern volatile unsigned char STATUS @ 0x003;

asm("STATUS equ 03h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned RP :2;
unsigned IRP :1;
};
struct {
unsigned :5;
unsigned RP0 :1;
unsigned RP1 :1;
};
struct {
unsigned CARRY :1;
};
struct {
unsigned :2;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0x003;

# 154
extern volatile unsigned char FSR @ 0x004;

asm("FSR equ 04h");



extern volatile unsigned char PORTA @ 0x005;

asm("PORTA equ 05h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0x005;

# 221
extern volatile unsigned char PORTB @ 0x006;

asm("PORTB equ 06h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0x006;

# 282
extern volatile unsigned char PCLATH @ 0x00A;

asm("PCLATH equ 0Ah");


typedef union {
struct {
unsigned PCLATH :5;
};
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits @ 0x00A;

# 301
extern volatile unsigned char INTCON @ 0x00B;

asm("INTCON equ 0Bh");


typedef union {
struct {
unsigned RBIF :1;
unsigned INTF :1;
unsigned T0IF :1;
unsigned RBIE :1;
unsigned INTE :1;
unsigned T0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :2;
unsigned TMR0IF :1;
unsigned :2;
unsigned TMR0IE :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0x00B;

# 378
extern volatile unsigned char PIR1 @ 0x00C;

asm("PIR1 equ 0Ch");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned CMIF :1;
unsigned EEIF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0x00C;

# 434
extern volatile unsigned short TMR1 @ 0x00E;

asm("TMR1 equ 0Eh");



extern volatile unsigned char TMR1L @ 0x00E;

asm("TMR1L equ 0Eh");



extern volatile unsigned char TMR1H @ 0x00F;

asm("TMR1H equ 0Fh");



extern volatile unsigned char T1CON @ 0x010;

asm("T1CON equ 010h");


typedef union {
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
};
struct {
unsigned :4;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0x010;

# 510
extern volatile unsigned char TMR2 @ 0x011;

asm("TMR2 equ 011h");



extern volatile unsigned char T2CON @ 0x012;

asm("T2CON equ 012h");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned TOUTPS0 :1;
unsigned TOUTPS1 :1;
unsigned TOUTPS2 :1;
unsigned TOUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0x012;

# 586
extern volatile unsigned short CCPR1 @ 0x015;

asm("CCPR1 equ 015h");



extern volatile unsigned char CCPR1L @ 0x015;

asm("CCPR1L equ 015h");



extern volatile unsigned char CCPR1H @ 0x016;

asm("CCPR1H equ 016h");



extern volatile unsigned char CCP1CON @ 0x017;

asm("CCP1CON equ 017h");


typedef union {
struct {
unsigned CCP1M :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0x017;

# 661
extern volatile unsigned char RCSTA @ 0x018;

asm("RCSTA equ 018h");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned :3;
unsigned ADDEN :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0x018;

# 731
extern volatile unsigned char TXREG @ 0x019;

asm("TXREG equ 019h");



extern volatile unsigned char RCREG @ 0x01A;

asm("RCREG equ 01Ah");



extern volatile unsigned char CMCON @ 0x01F;

asm("CMCON equ 01Fh");


typedef union {
struct {
unsigned CM :3;
unsigned CIS :1;
unsigned C1INV :1;
unsigned C2INV :1;
unsigned C1OUT :1;
unsigned C2OUT :1;
};
struct {
unsigned CM0 :1;
unsigned CM1 :1;
unsigned CM2 :1;
};
} CMCONbits_t;
extern volatile CMCONbits_t CMCONbits @ 0x01F;

# 812
extern volatile unsigned char OPTION_REG @ 0x081;

asm("OPTION_REG equ 081h");


typedef union {
struct {
unsigned PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned INTEDG :1;
unsigned nRBPU :1;
};
struct {
unsigned PS0 :1;
unsigned PS1 :1;
unsigned PS2 :1;
};
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;

# 881
extern volatile unsigned char TRISA @ 0x085;

asm("TRISA equ 085h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
unsigned TRISA7 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0x085;

# 942
extern volatile unsigned char TRISB @ 0x086;

asm("TRISB equ 086h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0x086;

# 1003
extern volatile unsigned char PIE1 @ 0x08C;

asm("PIE1 equ 08Ch");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned CMIE :1;
unsigned EEIE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0x08C;

# 1059
extern volatile unsigned char PCON @ 0x08E;

asm("PCON equ 08Eh");


typedef union {
struct {
unsigned nBOR :1;
unsigned nPOR :1;
unsigned :1;
unsigned OSCF :1;
};
struct {
unsigned nBO :1;
};
struct {
unsigned nBOD :1;
};
} PCONbits_t;
extern volatile PCONbits_t PCONbits @ 0x08E;

# 1107
extern volatile unsigned char PR2 @ 0x092;

asm("PR2 equ 092h");



extern volatile unsigned char TXSTA @ 0x098;

asm("TXSTA equ 098h");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0x098;

# 1169
extern volatile unsigned char SPBRG @ 0x099;

asm("SPBRG equ 099h");



extern volatile unsigned char EEDATA @ 0x09A;

asm("EEDATA equ 09Ah");



extern volatile unsigned char EEADR @ 0x09B;

asm("EEADR equ 09Bh");



extern volatile unsigned char EECON1 @ 0x09C;

asm("EECON1 equ 09Ch");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0x09C;

# 1224
extern volatile unsigned char EECON2 @ 0x09D;

asm("EECON2 equ 09Dh");



extern volatile unsigned char VRCON @ 0x09F;

asm("VRCON equ 09Fh");


typedef union {
struct {
unsigned VR :4;
unsigned :1;
unsigned VRR :1;
unsigned VROE :1;
unsigned VREN :1;
};
struct {
unsigned VR0 :1;
unsigned VR1 :1;
unsigned VR2 :1;
unsigned VR3 :1;
};
} VRCONbits_t;
extern volatile VRCONbits_t VRCONbits @ 0x09F;

# 1300
extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit C1INV @ (((unsigned) &CMCON)*8) + 4;

extern volatile __bit C1OUT @ (((unsigned) &CMCON)*8) + 6;

extern volatile __bit C2INV @ (((unsigned) &CMCON)*8) + 5;

extern volatile __bit C2OUT @ (((unsigned) &CMCON)*8) + 7;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;

extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit CMIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;

extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit EEIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit EEIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;

extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;

extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;

extern volatile __bit OSCF @ (((unsigned) &PCON)*8) + 3;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;

extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;

extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;

extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;

extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit RA6 @ (((unsigned) &PORTA)*8) + 6;

extern volatile __bit RA7 @ (((unsigned) &PORTA)*8) + 7;

extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;

extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;

extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;

extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISA6 @ (((unsigned) &TRISA)*8) + 6;

extern volatile __bit TRISA7 @ (((unsigned) &TRISA)*8) + 7;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit VR0 @ (((unsigned) &VRCON)*8) + 0;

extern volatile __bit VR1 @ (((unsigned) &VRCON)*8) + 1;

extern volatile __bit VR2 @ (((unsigned) &VRCON)*8) + 2;

extern volatile __bit VR3 @ (((unsigned) &VRCON)*8) + 3;

extern volatile __bit VREN @ (((unsigned) &VRCON)*8) + 7;

extern volatile __bit VROE @ (((unsigned) &VRCON)*8) + 6;

extern volatile __bit VRR @ (((unsigned) &VRCON)*8) + 5;

extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nBO @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOD @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;

# 26 "C:\Program Files\Microchip\xc8\v1.34\include\htc.h"
extern const char __xc8_OPTIM_SPEED;


# 13 "C:\Program Files\Microchip\xc8\v1.34\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);


# 27 "C:\Program Files\Microchip\xc8\v1.34\include\pic.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);

# 140
extern void flash_erase(unsigned short addr);

# 41 "C:\Program Files\Microchip\xc8\v1.34\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 149 "C:\Program Files\Microchip\xc8\v1.34\include\pic.h"
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;

# 8 "C:\Program Files\Microchip\xc8\v1.34\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 7 "C:\Program Files\Microchip\xc8\v1.34\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 24 "C:\Program Files\Microchip\xc8\v1.34\include\stdio.h"
extern int errno;

# 55
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files\Microchip\xc8\v1.34\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 100 "C:\Program Files\Microchip\xc8\v1.34\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 192
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);


# 19 "vip.c"
#pragma config FOSC = INTOSCIO
#pragma config WDTE = OFF
#pragma config PWRTE = OFF
#pragma config MCLRE = ON
#pragma config BOREN = OFF
#pragma config LVP = OFF
#pragma config CPD = OFF
#pragma config CP = OFF

# 45
char reg;
bit flag_serial;
bit Flag_active;
bit Flag_conectado;
bit Flag_motors_off;
bit display_config;
bit display_value;

int config;
int PWM_main_motor;
int PWM_motors;
int Time_main_motor;
int Time_motors;
int Active_motor;

char Matrix_Char[4];
int aux_tm0;
int cnt_int_tmr0;
int Tmp_atividade;



void Setup(void);

# 71
void inicializa_lcd(void);
void lcd_comando(unsigned char dado);
void lcd_escrevedado(unsigned char dado);

# 77
void Write_EEPROM(unsigned char addr, unsigned char data);
unsigned char Read_EEPROM(unsigned char addr);

# 82
void exibe_recebimento(void);
void exibe_configuracao(void);
void exibe_config_valor(void);
void exibe_status(void);

# 89
bit debounce(unsigned char button);
void IntToChar(int value);
void Duty_Pwm(int value);

void Setup(void) {

CMCON = 0x07;
TRISA = 0x38;
TRISB = 0x02;
PORTA = 0x38;
PORTB = 0x00;

CCP1CONbits.CCP1M0 = 1;
CCP1CONbits.CCP1M1 = 1;
CCP1CONbits.CCP1M2 = 1;
CCP1CONbits.CCP1M3 = 1;

# 114
PR2 = 0x18;




CCPR1L = 0xAF;

CCP1CONbits.CCP1Y = 0;
CCP1CONbits.CCP1X = 0;


T2CONbits.T2CKPS0 = 1;
T2CONbits.T2CKPS1 = 0;
T2CONbits.TMR2ON = 1;

# 133
SPBRG = 25;



TXSTAbits.TX9 = 0;
TXSTAbits.TXEN = 0;
TXSTAbits.SYNC = 0;
TXSTAbits.BRGH = 1;

RCSTAbits.SPEN = 1;
RCSTAbits.RX9 = 0;
RCSTAbits.CREN = 1;
RCSTAbits.FERR = 0;
RCSTAbits.OERR = 0;

PIE1bits.RCIE = 1;
PIR1bits.RCIF = 0;

INTCONbits.GIE = 1;
INTCONbits.PEIE = 1;
RCSTAbits.SPEN = 0;
inicializa_lcd();
RCSTAbits.SPEN = 1;

# 161
if (Read_EEPROM(0x7F) == 0xFF) {
Write_EEPROM(0x00, 0x78);
Write_EEPROM(0x01, 14);
Write_EEPROM(0x02, 0x78);
Write_EEPROM(0x03, 50);
Write_EEPROM(0x7F, 0);
}


PWM_main_motor = Read_EEPROM(0x00);
Time_main_motor = Read_EEPROM(0x01);
PWM_motors = Read_EEPROM(0x02);
Time_motors = Read_EEPROM(0x03);


INTCONbits.T0IE = 1;
INTCONbits.T0IF = 0;
OPTION_REGbits.T0CS = 0;
OPTION_REGbits.PSA = 0;

OPTION_REGbits.PS0 = 1;
OPTION_REGbits.PS1 = 1;
OPTION_REGbits.PS2 = 1;

Duty_Pwm(50);

# 192
TMR0 = 0x15;
config = 0;
display_config = 0;
display_value = 0;
flag_serial = 0;
reg = 0x00;
aux_tm0 = 0;
Flag_active = 0;
Flag_conectado = 0;
cnt_int_tmr0 = 0;
Tmp_atividade = 0;
Flag_motors_off = 0;
Active_motor = 1;

exibe_status();



}

void main(void) {
Setup();

while (1) {

if (flag_serial) {
exibe_recebimento();
flag_serial = 0;
}

if (Flag_active) {

RCSTAbits.SPEN = 0;
PIE1bits.RCIE = 0;

# 232
if (reg == 0x43) {

Flag_motors_off = 1;

Duty_Pwm(PWM_motors);

if (Active_motor == 1) {
PORTAbits.RA0 = 1;
PORTAbits.RA6 = 0;
PORTAbits.RA7 = 0;
} else if (Active_motor == 2) {
PORTAbits.RA0 = 0;
PORTAbits.RA6 = 1;
PORTAbits.RA7 = 0;
} else if (Active_motor == 3) {
PORTAbits.RA0 = 0;
PORTAbits.RA6 = 0;
PORTAbits.RA7 = 1;
}
PORTAbits.RA1 = 0;
PORTAbits.RA2 = 0;

Tmp_atividade = Time_motors;
cnt_int_tmr0 = 0;

} else if (reg == 0x52) {

Flag_motors_off = 1;

Duty_Pwm(PWM_main_motor);
PORTAbits.RA0 = 0;
PORTAbits.RA6 = 0;
PORTAbits.RA7 = 0;
PORTAbits.RA1 = 1;
PORTAbits.RA2 = 0;

Active_motor++;
if (Active_motor > 3) Active_motor = 1;

Tmp_atividade = Time_main_motor;
cnt_int_tmr0 = 0;


} else if (reg == 0x4C) {

Flag_motors_off = 1;

Duty_Pwm(PWM_main_motor);
PORTAbits.RA0 = 0;
PORTAbits.RA6 = 0;
PORTAbits.RA7 = 0;
PORTAbits.RA1 = 0;
PORTAbits.RA2 = 1;

Active_motor--;
if (Active_motor < 1) Active_motor = 3;

Tmp_atividade = Time_main_motor;
cnt_int_tmr0 = 0;

} else if (reg == 0x54) {

PORTAbits.RA0 = 0;
PORTAbits.RA6 = 0;
PORTAbits.RA7 = 0;
PORTAbits.RA1 = 0;
PORTAbits.RA2 = 0;
} else {
PIE1bits.RCIE = 1;
RCSTAbits.SPEN = 1;
}

Flag_active = 0;

# 310
}


if (display_config) {
exibe_configuracao();
}

if (display_value) {
exibe_config_valor();
}
}
}

void interrupt interrupcao(void) {

if (PIR1bits.RCIF == 1) {
INTCONbits.GIE = 0;
reg = RCREG;
flag_serial = 1;
Flag_active = 1;
RCREG = 0x00;
PIR1bits.RCIF = 0;
INTCONbits.GIE = 1;
} else if (INTCONbits.T0IF) {
aux_tm0++;
cnt_int_tmr0++;
INTCONbits.T0IE = 0;

if (debounce(PORTAbits.RA3)) {
aux_tm0 = 0;
config++;
if (config > 5) {
config = 0;
}
display_config = 1;
while (!PORTAbits.RA3);
} else if (debounce(PORTAbits.RA4)) {
aux_tm0 = 0;
if (config == 1) {
PWM_main_motor++;
if (PWM_main_motor > 100) {
PWM_main_motor = 0;
}
Duty_Pwm(PWM_main_motor);
} else if (config == 2) {
Time_main_motor++;
if (Time_main_motor > 255) {
Time_main_motor = 0;
}
} else if (config == 3) {
PWM_motors++;
if (PWM_motors > 100) {
PWM_motors = 0;
}
Duty_Pwm(PWM_motors);
} else if (config == 4) {
Time_motors++;
if (Time_motors > 255) {
Time_motors = 0;
}
}
display_value = 1;
}


if ((aux_tm0 == 100) && (config != 0)) {
config = 0;
aux_tm0 = 0;
display_config = 1;


PWM_main_motor = Read_EEPROM(0x00);
Time_main_motor = Read_EEPROM(0x01);
PWM_motors = Read_EEPROM(0x02);
Time_motors = Read_EEPROM(0x03);
}
if ((cnt_int_tmr0 == Tmp_atividade) && (Flag_motors_off)) {
cnt_int_tmr0 = 0;

PORTAbits.RA0 = 0;
PORTAbits.RA6 = 0;
PORTAbits.RA7 = 0;
PORTAbits.RA2 = 0;
PORTAbits.RA1 = 0;


Flag_motors_off = 0;
reg = 0x00;
RCREG = 0x00;
PIE1bits.RCIE = 1;
RCSTAbits.SPEN = 1;
}

TMR0 = 0x15;
INTCONbits.T0IF = 0;
INTCONbits.T0IE = 1;
}
}

void Duty_Pwm(int value) {

int porcent;

T2CONbits.TMR2ON = 0;

porcent = (value * 10);
CCPR1L = porcent >> 2;

if (porcent & 0b00000010) {
CCP1CONbits.CCP1X = 1;
} else {
CCP1CONbits.CCP1X = 0;
}
if (porcent & 0b0000001) {
CCP1CONbits.CCP1Y = 1;
} else {
CCP1CONbits.CCP1Y = 0;
}


T2CONbits.T2CKPS0 = 1;
T2CONbits.T2CKPS1 = 0;
T2CONbits.TMR2ON = 1;

}

void exibe_configuracao(void) {

# 444
display_value = 1;
RCSTAbits.SPEN = 0;
lcd_comando(0x01);
lcd_comando(0x80);

lcd_escrevedado('C');
lcd_escrevedado('o');
lcd_escrevedado('n');
lcd_escrevedado('f');
lcd_escrevedado('i');
lcd_escrevedado('g');
lcd_escrevedado(' ');

if ((config == 1) || (config == 2)) {
lcd_escrevedado('M');
lcd_escrevedado('o');
lcd_escrevedado('t');
lcd_escrevedado('o');
lcd_escrevedado('r');
lcd_escrevedado('0');
} else if ((config == 3) || (config == 4)) {
lcd_escrevedado('M');
lcd_escrevedado('T');
lcd_escrevedado(':');
lcd_escrevedado('1');
lcd_escrevedado('/');
lcd_escrevedado('2');
lcd_escrevedado('/');
lcd_escrevedado('3');
} else if (config == 5) {
lcd_escrevedado('S');
lcd_escrevedado('a');
lcd_escrevedado('l');
lcd_escrevedado('v');
lcd_escrevedado('a');
display_value = 0;

Write_EEPROM(0x00, PWM_main_motor);
Write_EEPROM(0x01, Time_main_motor);
Write_EEPROM(0x02, PWM_motors);
Write_EEPROM(0x03, Time_motors);
config = 0;
_delay((unsigned long)((1500)*(4000000/4000.0)));
exibe_status();
} else if (config == 0) {
exibe_status();
}
display_config = 0;
RCSTAbits.SPEN = 1;
}

void exibe_status(void) {
RCSTAbits.SPEN = 0;
lcd_comando(0x01);
lcd_comando(0x80);
if (Flag_conectado) {
lcd_escrevedado('O');
lcd_escrevedado('K');
} else {
lcd_escrevedado('A');
lcd_escrevedado('g');
lcd_escrevedado('u');
lcd_escrevedado('a');
lcd_escrevedado('r');
lcd_escrevedado('d');
lcd_escrevedado('.');
lcd_escrevedado(' ');
lcd_escrevedado('C');
lcd_escrevedado('o');
lcd_escrevedado('n');
}
RCSTAbits.SPEN = 1;
display_value = 0;
}

void exibe_config_valor(void) {
RCSTAbits.SPEN = 0;
lcd_comando(0xC0);
if ((config == 1) || (config == 3)) {

lcd_escrevedado('V');
lcd_escrevedado('e');
lcd_escrevedado('l');
lcd_escrevedado(':');
} else if ((config == 2) || (config == 4)) {

lcd_escrevedado('T');
lcd_escrevedado('e');
lcd_escrevedado('m');
lcd_escrevedado('p');
lcd_escrevedado('o');
lcd_escrevedado(':');
}
if (config == 1) {
IntToChar(PWM_main_motor);
} else if (config == 2) {
IntToChar(Time_main_motor);
} else if (config == 3) {
IntToChar(PWM_motors);
} else if (config == 4) {
IntToChar(Time_motors);
}

lcd_escrevedado(Matrix_Char[0]);
lcd_escrevedado(Matrix_Char[1]);
lcd_escrevedado(Matrix_Char[2]);
lcd_escrevedado(Matrix_Char[3]);
RCSTAbits.SPEN = 1;
display_value = 0;
}



void IntToChar(int value) {
sprintf(Matrix_Char, "%4i", value);
}

void inicializa_lcd(void) {
PORTB = 0X00;
PORTBbits.RB2 = 0;
PORTBbits.RB0 = 0;
_delay((unsigned long)((15)*(4000000/4000.0)));
lcd_comando(0x03);
lcd_comando(0x03);
lcd_comando(0x03);
lcd_comando(0x02);
lcd_comando(0x28);
lcd_comando(0x0C);
lcd_comando(0x01);
lcd_comando(0x06);
}

void lcd_comando(unsigned char dado) {
PORTBbits.RB2 = 0;
_delay((unsigned long)((100)*(4000000/4000000.0)));
PORTBbits.RB0 = 0;

PORTB = ((dado & 0xF0) | (PORTB & 0x0F));
PORTBbits.RB0 = 1;
_delay((unsigned long)((5)*(4000000/4000.0)));
PORTBbits.RB0 = 0;

PORTB = ((dado << 4) | (PORTB & 0x0F));
PORTBbits.RB0 = 1;
_delay((unsigned long)((5)*(4000000/4000.0)));
PORTBbits.RB0 = 0;
_delay((unsigned long)((40)*(4000000/4000000.0)));
}

void lcd_escrevedado(unsigned char dado) {
PORTBbits.RB2 = 1;
_delay((unsigned long)((100)*(4000000/4000000.0)));
PORTBbits.RB0 = 0;

PORTB = ((dado & 0xF0) | (PORTB & 0x0F));
PORTBbits.RB0 = 1;
_delay((unsigned long)((5)*(4000000/4000.0)));
PORTBbits.RB0 = 0;

PORTB = ((dado << 4) | (PORTB & 0x0F));
PORTBbits.RB0 = 1;
_delay((unsigned long)((5)*(4000000/4000.0)));
PORTBbits.RB0 = 0;
_delay((unsigned long)((40)*(4000000/4000000.0)));
}

void exibe_recebimento(void) {
RCSTAbits.SPEN = 0;
lcd_comando(0x01);
lcd_comando(0x80);
if (reg == 0x43) {
lcd_escrevedado('C');
lcd_escrevedado('i');
lcd_escrevedado('r');
lcd_escrevedado('c');
lcd_escrevedado('l');
lcd_escrevedado('e');
} else if (reg == 0x52) {
lcd_escrevedado('S');
lcd_escrevedado('w');
lcd_escrevedado('i');
lcd_escrevedado('p');
lcd_escrevedado('e');
lcd_escrevedado('-');
lcd_escrevedado('R');
} else if (reg == 0x4C) {
lcd_escrevedado('S');
lcd_escrevedado('w');
lcd_escrevedado('i');
lcd_escrevedado('p');
lcd_escrevedado('e');
lcd_escrevedado('-');
lcd_escrevedado('L');
} else if (reg == 0x54) {
lcd_escrevedado('T');
lcd_escrevedado('a');
lcd_escrevedado('p');
} else if (reg == 0x6B) {
lcd_escrevedado('L');
lcd_escrevedado('e');
lcd_escrevedado('a');
lcd_escrevedado('p');
lcd_escrevedado(' ');
lcd_comando(0xC0);
lcd_escrevedado('O');
lcd_escrevedado('K');
Flag_conectado = 1;
} else {
lcd_escrevedado('U');
lcd_escrevedado('n');
lcd_escrevedado('k');
lcd_escrevedado('n');
lcd_escrevedado('o');
lcd_escrevedado('w');
lcd_escrevedado('n');
lcd_escrevedado(':');
lcd_escrevedado(reg);
}
RCSTAbits.SPEN = 1;
}

void Write_EEPROM(unsigned char addr, unsigned char data) {
int aux_Global_interrupt;

aux_Global_interrupt = INTCONbits.GIE;
EEADR = addr;
EEDATA = data;

if (INTCONbits.GIE) {
INTCONbits.GIE = 0;
}
EECON1bits.WREN = 1;
EECON2 = 0x55;
EECON2 = 0xAA;
;
EECON1bits.WR = 1;
while (EECON1bits.WR);
EECON1bits.WREN = 0;
if (aux_Global_interrupt) INTCONbits.GIE = 1;
}

unsigned char Read_EEPROM(unsigned char addr) {
EEADR = addr;
EECON1bits.RD = 1;
while (EECON1bits.RD);
return (EEDATA);
}

bit debounce(unsigned char button) {
_delay((unsigned long)((30)*(4000000/4000.0)));
if (button == 0) {
return 1;
} else {
return 0;
}
}

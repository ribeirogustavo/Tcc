

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 29 14:10:38 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     	;# 
    37  0001                     	;# 
    38  0002                     	;# 
    39  0003                     	;# 
    40  0004                     	;# 
    41  0005                     	;# 
    42  0006                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  000C                     	;# 
    46  000E                     	;# 
    47  000E                     	;# 
    48  000F                     	;# 
    49  0010                     	;# 
    50  0011                     	;# 
    51  0012                     	;# 
    52  0015                     	;# 
    53  0015                     	;# 
    54  0016                     	;# 
    55  0017                     	;# 
    56  0018                     	;# 
    57  0019                     	;# 
    58  001A                     	;# 
    59  001F                     	;# 
    60  0081                     	;# 
    61  0085                     	;# 
    62  0086                     	;# 
    63  008C                     	;# 
    64  008E                     	;# 
    65  0092                     	;# 
    66  0098                     	;# 
    67  0099                     	;# 
    68  009A                     	;# 
    69  009B                     	;# 
    70  009C                     	;# 
    71  009D                     	;# 
    72  009F                     	;# 
    73                           
    74                           	psect	strings
    75  0760                     __pstrings:	
    76  0760                     stringtab:	
    77  0760                     __stringtab:	
    78  0760                     stringcode:	
    79                           ;	String table - string pointers are 1 byte each
    80                           
    81  0760                     stringdir:	
    82  0760  3007               	movlw	high stringdir
    83  0761  008A               	movwf	10
    84  0762  0804               	movf	4,w
    85  0763  0A84               	incf	4,f
    86  0764  0782               	addwf	2,f
    87  0765                     __stringbase:	
    88  0765  3400               	retlw	0
    89  0766                     __end_of__stringtab:	
    90  0766                     _dpowers:	
    91  0766  3401               	retlw	1
    92  0767  3400               	retlw	0
    93  0768  340A               	retlw	10
    94  0769  3400               	retlw	0
    95  076A  3464               	retlw	100
    96  076B  3400               	retlw	0
    97  076C  34E8               	retlw	232
    98  076D  3403               	retlw	3
    99  076E  3410               	retlw	16
   100  076F  3427               	retlw	39
   101  0770                     __end_of_dpowers:	
   102  0017                     _CCP1CONbits	set	23
   103  0015                     _CCPR1L	set	21
   104  001F                     _CMCON	set	31
   105  000B                     _INTCONbits	set	11
   106  000C                     _PIR1bits	set	12
   107  0005                     _PORTA	set	5
   108  0005                     _PORTAbits	set	5
   109  0006                     _PORTB	set	6
   110  0006                     _PORTBbits	set	6
   111  001A                     _RCREG	set	26
   112  0018                     _RCSTAbits	set	24
   113  0012                     _T2CONbits	set	18
   114  0001                     _TMR0	set	1
   115  009B                     _EEADR	set	155
   116  009C                     _EECON1bits	set	156
   117  009D                     _EECON2	set	157
   118  009A                     _EEDATA	set	154
   119  0081                     _OPTION_REGbits	set	129
   120  008C                     _PIE1bits	set	140
   121  0092                     _PR2	set	146
   122  0099                     _SPBRG	set	153
   123  0085                     _TRISA	set	133
   124  0086                     _TRISB	set	134
   125  0098                     _TXSTAbits	set	152
   126  0770                     STR_1:	
   127  0770  3425               	retlw	37	;'%'
   128  0771  3434               	retlw	52	;'4'
   129  0772  3469               	retlw	105	;'i'
   130  0773  3400               	retlw	0
   131                           
   132                           ; #config settings
   133  0000                     
   134                           	psect	cinit
   135  0011                     start_initialization:	
   136  0011                     __initialization:	
   137                           
   138                           ; Clear objects allocated to BITCOMMON
   139  0011  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   140                           
   141                           ; Clear objects allocated to BANK0
   142  0012  1383               	bcf	3,7	;select IRP bank0
   143  0013  3046               	movlw	low __pbssBANK0
   144  0014  0084               	movwf	4
   145  0015  305D               	movlw	low (__pbssBANK0+23)
   146  0016  27B7               	fcall	clear_ram0
   147  0017                     end_of_initialization:	
   148                           ;End of C runtime variable initialization code
   149                           
   150  0017                     __end_of__initialization:	
   151  0017  0183               	clrf	3
   152  0018  2B39               	ljmp	_main	;jump to C main() function
   153                           
   154                           	psect	bitbssCOMMON
   155  03E0                     __pbitbssCOMMON:	
   156  03E0                     _Flag_active:	
   157  03E0                     	ds	1
   158  03E1                     _Flag_conectado:	
   159  03E1                     	ds	1
   160  03E2                     _Flag_motors_off:	
   161  03E2                     	ds	1
   162  03E3                     _display_config:	
   163  03E3                     	ds	1
   164  03E4                     _display_value:	
   165  03E4                     	ds	1
   166  03E5                     _flag_serial:	
   167  03E5                     	ds	1
   168                           
   169                           	psect	bssBANK0
   170  0046                     __pbssBANK0:	
   171  0046                     _Active_motor:	
   172  0046                     	ds	2
   173  0048                     _PWM_main_motor:	
   174  0048                     	ds	2
   175  004A                     _PWM_motors:	
   176  004A                     	ds	2
   177  004C                     _Time_main_motor:	
   178  004C                     	ds	2
   179  004E                     _Time_motors:	
   180  004E                     	ds	2
   181  0050                     _Tmp_atividade:	
   182  0050                     	ds	2
   183  0052                     _aux_tm0:	
   184  0052                     	ds	2
   185  0054                     _cnt_int_tmr0:	
   186  0054                     	ds	2
   187  0056                     _config:	
   188  0056                     	ds	2
   189  0058                     _reg:	
   190  0058                     	ds	1
   191  0059                     _Matrix_Char:	
   192  0059                     	ds	4
   193                           
   194                           	psect	clrtext
   195  07B7                     clear_ram0:	
   196                           ;	Called with FSR containing the base address, and
   197                           ;	W with the last address+1
   198                           
   199  07B7  0064               	clrwdt	;clear the watchdog before getting into this loop
   200  07B8                     clrloop0:	
   201  07B8  0180               	clrf	0	;clear RAM location pointed to by FSR
   202  07B9  0A84               	incf	4,f	;increment pointer
   203  07BA  0604               	xorwf	4,w	;XOR with final address
   204  07BB  1903               	btfsc	3,2	;have we reached the end yet?
   205  07BC  3400               	retlw	0	;all done for this memory range, return
   206  07BD  0604               	xorwf	4,w	;XOR again to restore value
   207  07BE  2FB8               	goto	clrloop0	;do the next byte
   208                           
   209                           	psect	cstackCOMMON
   210  0070                     __pcstackCOMMON:	
   211  0070                     ?_inicializa_lcd:	
   212  0070                     ?_exibe_status:	
   213                           ; 0 bytes @ 0x0
   214                           
   215  0070                     ?_exibe_recebimento:	
   216                           ; 0 bytes @ 0x0
   217                           
   218  0070                     ?_exibe_configuracao:	
   219                           ; 0 bytes @ 0x0
   220                           
   221  0070                     ?_exibe_config_valor:	
   222                           ; 0 bytes @ 0x0
   223                           
   224  0070                     ?_debounce:	
   225                           ; 0 bytes @ 0x0
   226                           
   227  0070                     ??_debounce:	
   228                           ; 1 bit 
   229                           
   230  0070                     ?_lcd_comando:	
   231                           ; 0 bytes @ 0x0
   232                           
   233  0070                     ?_lcd_escrevedado:	
   234                           ; 0 bytes @ 0x0
   235                           
   236  0070                     ?_isdigit:	
   237                           ; 0 bytes @ 0x0
   238                           
   239  0070                     ?_Setup:	
   240                           ; 1 bit 
   241                           
   242  0070                     ?_main:	
   243                           ; 0 bytes @ 0x0
   244                           
   245  0070                     ?_interrupcao:	
   246                           ; 0 bytes @ 0x0
   247                           
   248  0070                     ??i1_Read_EEPROM:	
   249                           ; 0 bytes @ 0x0
   250                           
   251  0070                     ?_Read_EEPROM:	
   252                           ; 0 bytes @ 0x0
   253                           
   254  0070                     ?i1_Read_EEPROM:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?i1___wmul:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     i1Read_EEPROM@addr:	
   261                           ; 2 bytes @ 0x0
   262                           
   263  0070                     i1___wmul@multiplier:	
   264                           ; 1 bytes @ 0x0
   265                           
   266                           
   267                           ; 2 bytes @ 0x0
   268  0070                     	ds	2
   269  0072                     debounce@button:	
   270  0072                     i1___wmul@multiplicand:	
   271                           ; 1 bytes @ 0x2
   272                           
   273                           
   274                           ; 2 bytes @ 0x2
   275  0072                     	ds	2
   276  0074                     ??i1___wmul:	
   277  0074                     i1___wmul@product:	
   278                           ; 0 bytes @ 0x4
   279                           
   280                           
   281                           ; 2 bytes @ 0x4
   282  0074                     	ds	2
   283  0076                     ?i1_Duty_Pwm:	
   284  0076                     i1Duty_Pwm@value:	
   285                           ; 0 bytes @ 0x6
   286                           
   287                           
   288                           ; 2 bytes @ 0x6
   289  0076                     	ds	2
   290  0078                     ??i1_Duty_Pwm:	
   291                           
   292                           ; 0 bytes @ 0x8
   293  0078                     	ds	2
   294  007A                     i1Duty_Pwm@porcent:	
   295                           
   296                           ; 2 bytes @ 0xA
   297  007A                     	ds	2
   298                           
   299                           	psect	cstackBANK0
   300  0020                     __pcstackBANK0:	
   301  0020                     ??_interrupcao:	
   302                           
   303                           ; 0 bytes @ 0x0
   304  0020                     	ds	6
   305  0026                     ??_Read_EEPROM:	
   306  0026                     ?_Write_EEPROM:	
   307                           ; 0 bytes @ 0x6
   308                           
   309  0026                     ??_lcd_comando:	
   310                           ; 0 bytes @ 0x6
   311                           
   312  0026                     ??_lcd_escrevedado:	
   313                           ; 0 bytes @ 0x6
   314                           
   315  0026                     ??_isdigit:	
   316                           ; 0 bytes @ 0x6
   317                           
   318  0026                     ?___wmul:	
   319                           ; 0 bytes @ 0x6
   320                           
   321  0026                     ?___lwdiv:	
   322                           ; 2 bytes @ 0x6
   323                           
   324  0026                     Write_EEPROM@data:	
   325                           ; 2 bytes @ 0x6
   326                           
   327  0026                     Read_EEPROM@addr:	
   328                           ; 1 bytes @ 0x6
   329                           
   330  0026                     _isdigit$702:	
   331                           ; 1 bytes @ 0x6
   332                           
   333  0026                     ___wmul@multiplier:	
   334                           ; 1 bytes @ 0x6
   335                           
   336  0026                     ___lwdiv@divisor:	
   337                           ; 2 bytes @ 0x6
   338                           
   339                           
   340                           ; 2 bytes @ 0x6
   341  0026                     	ds	1
   342  0027                     ??_Write_EEPROM:	
   343  0027                     isdigit@c:	
   344                           ; 0 bytes @ 0x7
   345                           
   346                           
   347                           ; 1 bytes @ 0x7
   348  0027                     	ds	1
   349  0028                     lcd_comando@dado:	
   350  0028                     lcd_escrevedado@dado:	
   351                           ; 1 bytes @ 0x8
   352                           
   353  0028                     ___wmul@multiplicand:	
   354                           ; 1 bytes @ 0x8
   355                           
   356  0028                     ___lwdiv@dividend:	
   357                           ; 2 bytes @ 0x8
   358                           
   359                           
   360                           ; 2 bytes @ 0x8
   361  0028                     	ds	1
   362  0029                     ??_inicializa_lcd:	
   363  0029                     ??_exibe_status:	
   364                           ; 0 bytes @ 0x9
   365                           
   366  0029                     ??_exibe_recebimento:	
   367                           ; 0 bytes @ 0x9
   368                           
   369  0029                     Write_EEPROM@aux_Global_interrupt:	
   370                           ; 0 bytes @ 0x9
   371                           
   372                           
   373                           ; 2 bytes @ 0x9
   374  0029                     	ds	1
   375  002A                     ??___wmul:	
   376  002A                     ??___lwdiv:	
   377                           ; 0 bytes @ 0xA
   378                           
   379  002A                     ___wmul@product:	
   380                           ; 0 bytes @ 0xA
   381                           
   382                           
   383                           ; 2 bytes @ 0xA
   384  002A                     	ds	1
   385  002B                     Write_EEPROM@addr:	
   386  002B                     ___lwdiv@quotient:	
   387                           ; 1 bytes @ 0xB
   388                           
   389                           
   390                           ; 2 bytes @ 0xB
   391  002B                     	ds	1
   392  002C                     ?_Duty_Pwm:	
   393  002C                     ??_exibe_configuracao:	
   394                           ; 0 bytes @ 0xC
   395                           
   396  002C                     Duty_Pwm@value:	
   397                           ; 0 bytes @ 0xC
   398                           
   399                           
   400                           ; 2 bytes @ 0xC
   401  002C                     	ds	1
   402  002D                     ___lwdiv@counter:	
   403                           
   404                           ; 1 bytes @ 0xD
   405  002D                     	ds	1
   406  002E                     ??_Duty_Pwm:	
   407  002E                     ?___lwmod:	
   408                           ; 0 bytes @ 0xE
   409                           
   410  002E                     ___lwmod@divisor:	
   411                           ; 2 bytes @ 0xE
   412                           
   413                           
   414                           ; 2 bytes @ 0xE
   415  002E                     	ds	2
   416  0030                     Duty_Pwm@porcent:	
   417  0030                     ___lwmod@dividend:	
   418                           ; 2 bytes @ 0x10
   419                           
   420                           
   421                           ; 2 bytes @ 0x10
   422  0030                     	ds	2
   423  0032                     ??_Setup:	
   424  0032                     ??___lwmod:	
   425                           ; 0 bytes @ 0x12
   426                           
   427                           
   428                           ; 0 bytes @ 0x12
   429  0032                     	ds	1
   430  0033                     ___lwmod@counter:	
   431                           
   432                           ; 1 bytes @ 0x13
   433  0033                     	ds	1
   434  0034                     ?_sprintf:	
   435  0034                     sprintf@f:	
   436                           ; 2 bytes @ 0x14
   437                           
   438                           
   439                           ; 1 bytes @ 0x14
   440  0034                     	ds	3
   441  0037                     ??_sprintf:	
   442                           
   443                           ; 0 bytes @ 0x17
   444  0037                     	ds	3
   445  003A                     sprintf@ap:	
   446                           
   447                           ; 1 bytes @ 0x1A
   448  003A                     	ds	1
   449  003B                     sprintf@prec:	
   450                           
   451                           ; 1 bytes @ 0x1B
   452  003B                     	ds	1
   453  003C                     sprintf@flag:	
   454                           
   455                           ; 1 bytes @ 0x1C
   456  003C                     	ds	1
   457  003D                     sprintf@val:	
   458                           
   459                           ; 2 bytes @ 0x1D
   460  003D                     	ds	2
   461  003F                     sprintf@sp:	
   462                           
   463                           ; 1 bytes @ 0x1F
   464  003F                     	ds	1
   465  0040                     sprintf@width:	
   466                           
   467                           ; 2 bytes @ 0x20
   468  0040                     	ds	2
   469  0042                     sprintf@c:	
   470                           
   471                           ; 1 bytes @ 0x22
   472  0042                     	ds	1
   473  0043                     ?_IntToChar:	
   474  0043                     IntToChar@value:	
   475                           ; 0 bytes @ 0x23
   476                           
   477                           
   478                           ; 2 bytes @ 0x23
   479  0043                     	ds	2
   480  0045                     ??_IntToChar:	
   481                           
   482                           ; 0 bytes @ 0x25
   483  0045                     	ds	1
   484  0046                     ??_exibe_config_valor:	
   485  0046                     ??_main:	
   486                           ; 0 bytes @ 0x26
   487                           
   488                           
   489                           	psect	maintext
   490  0339                     __pmaintext:	
   491                           ; 0 bytes @ 0x26
   492 ;;
   493 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   494 ;;
   495 ;; *************** function _main *****************
   496 ;; Defined at:
   497 ;;		line 212 in file "vip.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;		None
   500 ;; Auto vars:     Size  Location     Type
   501 ;;		None
   502 ;; Return value:  Size  Location     Type
   503 ;;		None               void
   504 ;; Registers used:
   505 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   506 ;; Tracked objects:
   507 ;;		On entry : B00/0
   508 ;;		On exit  : 0/0
   509 ;;		Unchanged: 0/0
   510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   511 ;;      Params:         0       0       0       0
   512 ;;      Locals:         0       0       0       0
   513 ;;      Temps:          0       0       0       0
   514 ;;      Totals:         0       0       0       0
   515 ;;Total ram usage:        0 bytes
   516 ;; Hardware stack levels required when called:    7
   517 ;; This function calls:
   518 ;;		_Duty_Pwm
   519 ;;		_Setup
   520 ;;		_exibe_config_valor
   521 ;;		_exibe_configuracao
   522 ;;		_exibe_recebimento
   523 ;; This function is called by:
   524 ;;		Startup code after reset
   525 ;; This function uses a non-reentrant model
   526 ;;
   527                           
   528                           
   529                           ;psect for function _main
   530  0339                     _main:	
   531                           
   532                           ;vip.c: 213: Setup();
   533                           
   534                           ;incstack = 0
   535                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   536  0339  2282               	fcall	_Setup
   537  033A                     l2080:	
   538                           ;vip.c: 215: while (1) {
   539                           
   540                           
   541                           ;vip.c: 217: if (flag_serial) {
   542  033A  1EFC               	btfss	_flag_serial/(0+8),_flag_serial& (0+7)
   543  033B  2B3E               	goto	l2086
   544                           
   545                           ;vip.c: 218: exibe_recebimento();
   546  033C  247A               	fcall	_exibe_recebimento
   547                           
   548                           ;vip.c: 219: flag_serial = 0;
   549  033D  12FC               	bcf	_flag_serial/(0+8),_flag_serial& (0+7)
   550  033E                     l2086:	
   551                           
   552                           ;vip.c: 220: }
   553                           ;vip.c: 222: if (Flag_active) {
   554  033E  1C7C               	btfss	_Flag_active/(0+8),_Flag_active& (0+7)
   555  033F  2BD8               	goto	l119
   556                           
   557                           ;vip.c: 224: RCSTAbits.SPEN = 0;
   558  0340  1283               	bcf	3,5	;RP0=0, select bank0
   559  0341  1303               	bcf	3,6	;RP1=0, select bank0
   560  0342  1398               	bcf	24,7	;volatile
   561                           
   562                           ;vip.c: 225: PIE1bits.RCIE = 0;
   563  0343  1683               	bsf	3,5	;RP0=1, select bank1
   564  0344  1303               	bcf	3,6	;RP1=0, select bank1
   565  0345  128C               	bcf	12,5	;volatile
   566                           
   567                           ;vip.c: 232: if (reg == 0x43) {
   568  0346  3043               	movlw	67
   569  0347  1283               	bcf	3,5	;RP0=0, select bank0
   570  0348  1303               	bcf	3,6	;RP1=0, select bank0
   571  0349  0658               	xorwf	_reg,w
   572  034A  1D03               	btfss	3,2
   573  034B  2B72               	goto	l2112
   574                           
   575                           ;vip.c: 234: Flag_motors_off = 1;
   576  034C  157C               	bsf	_Flag_motors_off/(0+8),_Flag_motors_off& (0+7)
   577                           
   578                           ;vip.c: 236: Duty_Pwm(PWM_motors);
   579  034D  084B               	movf	_PWM_motors+1,w
   580  034E  00AD               	movwf	Duty_Pwm@value+1
   581  034F  084A               	movf	_PWM_motors,w
   582  0350  00AC               	movwf	Duty_Pwm@value
   583  0351  2654               	fcall	_Duty_Pwm
   584                           
   585                           ;vip.c: 238: if (Active_motor == 1) {
   586  0352  1283               	bcf	3,5	;RP0=0, select bank0
   587  0353  1303               	bcf	3,6	;RP1=0, select bank0
   588  0354  0346               	decf	_Active_motor,w
   589  0355  0447               	iorwf	_Active_motor+1,w
   590  0356  1D03               	btfss	3,2
   591  0357  2B5B               	goto	l2100
   592                           
   593                           ;vip.c: 239: PORTAbits.RA0 = 1;
   594  0358  1405               	bsf	5,0	;volatile
   595                           
   596                           ;vip.c: 240: PORTAbits.RA6 = 0;
   597  0359  1305               	bcf	5,6	;volatile
   598  035A  2B62               	goto	L1
   599  035B                     l2100:	
   600                           ;vip.c: 242: } else if (Active_motor == 2) {
   601                           
   602                           ;vip.c: 241: PORTAbits.RA7 = 0;
   603                           
   604  035B  3002               	movlw	2
   605  035C  0646               	xorwf	_Active_motor,w
   606  035D  0447               	iorwf	_Active_motor+1,w
   607  035E  1D03               	btfss	3,2
   608  035F  2B64               	goto	l2104
   609                           
   610                           ;vip.c: 243: PORTAbits.RA0 = 0;
   611  0360  1005               	bcf	5,0	;volatile
   612                           
   613                           ;vip.c: 244: PORTAbits.RA6 = 1;
   614  0361  1705               	bsf	5,6	;volatile
   615  0362                     L1:	
   616                           
   617                           ;vip.c: 245: PORTAbits.RA7 = 0;
   618  0362  1385               	bcf	5,7	;volatile
   619                           
   620                           ;vip.c: 246: } else if (Active_motor == 3) {
   621  0363  2B6C               	goto	l122
   622  0364                     l2104:	
   623  0364  3003               	movlw	3
   624  0365  0646               	xorwf	_Active_motor,w
   625  0366  0447               	iorwf	_Active_motor+1,w
   626  0367  1D03               	btfss	3,2
   627  0368  2B6C               	goto	l122
   628                           
   629                           ;vip.c: 247: PORTAbits.RA0 = 0;
   630  0369  1005               	bcf	5,0	;volatile
   631                           
   632                           ;vip.c: 248: PORTAbits.RA6 = 0;
   633  036A  1305               	bcf	5,6	;volatile
   634                           
   635                           ;vip.c: 249: PORTAbits.RA7 = 1;
   636  036B  1785               	bsf	5,7	;volatile
   637  036C                     l122:	
   638                           
   639                           ;vip.c: 250: }
   640                           ;vip.c: 251: PORTAbits.RA1 = 0;
   641  036C  1085               	bcf	5,1	;volatile
   642                           
   643                           ;vip.c: 252: PORTAbits.RA2 = 0;
   644  036D  1105               	bcf	5,2	;volatile
   645                           
   646                           ;vip.c: 254: Tmp_atividade = Time_motors;
   647  036E  084F               	movf	_Time_motors+1,w
   648  036F  00D1               	movwf	_Tmp_atividade+1
   649  0370  084E               	movf	_Time_motors,w
   650  0371  2BC3               	goto	L2
   651  0372                     l2112:	
   652                           ;vip.c: 257: } else if (reg == 0x52) {
   653                           
   654                           ;vip.c: 255: cnt_int_tmr0 = 0;
   655                           
   656  0372  3052               	movlw	82
   657  0373  0658               	xorwf	_reg,w
   658  0374  1D03               	btfss	3,2
   659  0375  2B96               	goto	l2136
   660                           
   661                           ;vip.c: 259: Flag_motors_off = 1;
   662  0376  157C               	bsf	_Flag_motors_off/(0+8),_Flag_motors_off& (0+7)
   663                           
   664                           ;vip.c: 261: Duty_Pwm(PWM_main_motor);
   665  0377  0849               	movf	_PWM_main_motor+1,w
   666  0378  00AD               	movwf	Duty_Pwm@value+1
   667  0379  0848               	movf	_PWM_main_motor,w
   668  037A  00AC               	movwf	Duty_Pwm@value
   669  037B  2654               	fcall	_Duty_Pwm
   670                           
   671                           ;vip.c: 262: PORTAbits.RA0 = 0;
   672  037C  1283               	bcf	3,5	;RP0=0, select bank0
   673  037D  1303               	bcf	3,6	;RP1=0, select bank0
   674  037E  1005               	bcf	5,0	;volatile
   675                           
   676                           ;vip.c: 263: PORTAbits.RA6 = 0;
   677  037F  1305               	bcf	5,6	;volatile
   678                           
   679                           ;vip.c: 264: PORTAbits.RA7 = 0;
   680  0380  1385               	bcf	5,7	;volatile
   681                           
   682                           ;vip.c: 265: PORTAbits.RA1 = 1;
   683  0381  1485               	bsf	5,1	;volatile
   684                           
   685                           ;vip.c: 266: PORTAbits.RA2 = 0;
   686  0382  1105               	bcf	5,2	;volatile
   687                           
   688                           ;vip.c: 268: Active_motor++;
   689  0383  3001               	movlw	1
   690  0384  07C6               	addwf	_Active_motor,f
   691  0385  1803               	skipnc
   692  0386  0AC7               	incf	_Active_motor+1,f
   693  0387  3000               	movlw	0
   694  0388  07C7               	addwf	_Active_motor+1,f
   695                           
   696                           ;vip.c: 269: if (Active_motor > 3) Active_motor = 1;
   697  0389  0847               	movf	_Active_motor+1,w
   698  038A  3A80               	xorlw	128
   699  038B  00FF               	movwf	127
   700  038C  3080               	movlw	128
   701  038D  027F               	subwf	127,w
   702  038E  1D03               	skipz
   703  038F  2B92               	goto	u1815
   704  0390  3004               	movlw	4
   705  0391  0246               	subwf	_Active_motor,w
   706  0392                     u1815:	
   707  0392  1C03               	skipc
   708  0393  2BBE               	goto	l131
   709  0394  3001               	movlw	1
   710  0395  2BB9               	goto	L3
   711  0396                     l2136:	
   712                           ;vip.c: 275: } else if (reg == 0x4C) {
   713                           
   714                           ;vip.c: 272: cnt_int_tmr0 = 0;
   715                           
   716                           ;vip.c: 271: Tmp_atividade = Time_main_motor;
   717                           
   718  0396  304C               	movlw	76
   719  0397  0658               	xorwf	_reg,w
   720  0398  1D03               	btfss	3,2
   721  0399  2BC7               	goto	l2160
   722                           
   723                           ;vip.c: 277: Flag_motors_off = 1;
   724  039A  157C               	bsf	_Flag_motors_off/(0+8),_Flag_motors_off& (0+7)
   725                           
   726                           ;vip.c: 279: Duty_Pwm(PWM_main_motor);
   727  039B  0849               	movf	_PWM_main_motor+1,w
   728  039C  00AD               	movwf	Duty_Pwm@value+1
   729  039D  0848               	movf	_PWM_main_motor,w
   730  039E  00AC               	movwf	Duty_Pwm@value
   731  039F  2654               	fcall	_Duty_Pwm
   732                           
   733                           ;vip.c: 280: PORTAbits.RA0 = 0;
   734  03A0  1283               	bcf	3,5	;RP0=0, select bank0
   735  03A1  1303               	bcf	3,6	;RP1=0, select bank0
   736  03A2  1005               	bcf	5,0	;volatile
   737                           
   738                           ;vip.c: 281: PORTAbits.RA6 = 0;
   739  03A3  1305               	bcf	5,6	;volatile
   740                           
   741                           ;vip.c: 282: PORTAbits.RA7 = 0;
   742  03A4  1385               	bcf	5,7	;volatile
   743                           
   744                           ;vip.c: 283: PORTAbits.RA1 = 0;
   745  03A5  1085               	bcf	5,1	;volatile
   746                           
   747                           ;vip.c: 284: PORTAbits.RA2 = 1;
   748  03A6  1505               	bsf	5,2	;volatile
   749                           
   750                           ;vip.c: 286: Active_motor--;
   751  03A7  30FF               	movlw	255
   752  03A8  07C6               	addwf	_Active_motor,f
   753  03A9  1803               	skipnc
   754  03AA  0AC7               	incf	_Active_motor+1,f
   755  03AB  30FF               	movlw	255
   756  03AC  07C7               	addwf	_Active_motor+1,f
   757                           
   758                           ;vip.c: 287: if (Active_motor < 1) Active_motor = 3;
   759  03AD  0847               	movf	_Active_motor+1,w
   760  03AE  3A80               	xorlw	128
   761  03AF  00FF               	movwf	127
   762  03B0  3080               	movlw	128
   763  03B1  027F               	subwf	127,w
   764  03B2  1D03               	skipz
   765  03B3  2BB6               	goto	u1835
   766  03B4  3001               	movlw	1
   767  03B5  0246               	subwf	_Active_motor,w
   768  03B6                     u1835:	
   769  03B6  1803               	skipnc
   770  03B7  2BBE               	goto	l131
   771  03B8  3003               	movlw	3
   772  03B9                     L3:	
   773  03B9  1283               	bcf	3,5	;RP0=0, select bank0
   774  03BA  1303               	bcf	3,6	;RP1=0, select bank0
   775  03BB  00C6               	movwf	_Active_motor
   776  03BC  3000               	movlw	0
   777  03BD  00C7               	movwf	_Active_motor+1
   778  03BE                     l131:	
   779                           
   780                           ;vip.c: 289: Tmp_atividade = Time_main_motor;
   781  03BE  1283               	bcf	3,5	;RP0=0, select bank0
   782  03BF  1303               	bcf	3,6	;RP1=0, select bank0
   783  03C0  084D               	movf	_Time_main_motor+1,w
   784  03C1  00D1               	movwf	_Tmp_atividade+1
   785  03C2  084C               	movf	_Time_main_motor,w
   786  03C3                     L2:	
   787  03C3  00D0               	movwf	_Tmp_atividade
   788                           
   789                           ;vip.c: 290: cnt_int_tmr0 = 0;
   790  03C4  01D4               	clrf	_cnt_int_tmr0
   791  03C5  01D5               	clrf	_cnt_int_tmr0+1
   792                           
   793                           ;vip.c: 292: } else if (reg == 0x54) {
   794  03C6  2BD7               	goto	l126
   795  03C7                     l2160:	
   796  03C7  3054               	movlw	84
   797  03C8  0658               	xorwf	_reg,w
   798  03C9  1D03               	btfss	3,2
   799  03CA  2BD1               	goto	l133
   800                           
   801                           ;vip.c: 294: PORTAbits.RA0 = 0;
   802  03CB  1005               	bcf	5,0	;volatile
   803                           
   804                           ;vip.c: 295: PORTAbits.RA6 = 0;
   805  03CC  1305               	bcf	5,6	;volatile
   806                           
   807                           ;vip.c: 296: PORTAbits.RA7 = 0;
   808  03CD  1385               	bcf	5,7	;volatile
   809                           
   810                           ;vip.c: 297: PORTAbits.RA1 = 0;
   811  03CE  1085               	bcf	5,1	;volatile
   812                           
   813                           ;vip.c: 298: PORTAbits.RA2 = 0;
   814  03CF  1105               	bcf	5,2	;volatile
   815                           
   816                           ;vip.c: 299: } else {
   817  03D0  2BD7               	goto	l126
   818  03D1                     l133:	
   819                           
   820                           ;vip.c: 300: PIE1bits.RCIE = 1;
   821  03D1  1683               	bsf	3,5	;RP0=1, select bank1
   822  03D2  1303               	bcf	3,6	;RP1=0, select bank1
   823  03D3  168C               	bsf	12,5	;volatile
   824                           
   825                           ;vip.c: 301: RCSTAbits.SPEN = 1;
   826  03D4  1283               	bcf	3,5	;RP0=0, select bank0
   827  03D5  1303               	bcf	3,6	;RP1=0, select bank0
   828  03D6  1798               	bsf	24,7	;volatile
   829  03D7                     l126:	
   830                           
   831                           ;vip.c: 302: }
   832                           ;vip.c: 304: Flag_active = 0;
   833  03D7  107C               	bcf	_Flag_active/(0+8),_Flag_active& (0+7)
   834  03D8                     l119:	
   835                           
   836                           ;vip.c: 310: }
   837                           ;vip.c: 313: if (display_config) {
   838  03D8  1DFC               	btfss	_display_config/(0+8),_display_config& (0+7)
   839  03D9  2BDB               	goto	l2166
   840                           
   841                           ;vip.c: 314: exibe_configuracao();
   842  03DA  23DF               	fcall	_exibe_configuracao
   843  03DB                     l2166:	
   844                           
   845                           ;vip.c: 315: }
   846                           ;vip.c: 317: if (display_value) {
   847  03DB  1E7C               	btfss	_display_value/(0+8),_display_value& (0+7)
   848  03DC  2B3A               	goto	l2080
   849                           
   850                           ;vip.c: 318: exibe_config_valor();
   851  03DD  24F7               	fcall	_exibe_config_valor
   852  03DE  2B3A               	goto	l2080
   853  03DF                     __end_of_main:	
   854                           
   855                           	psect	text1
   856  047A                     __ptext1:	
   857 ;; *************** function _exibe_recebimento *****************
   858 ;; Defined at:
   859 ;;		line 610 in file "vip.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;		None
   864 ;; Return value:  Size  Location     Type
   865 ;;		None               void
   866 ;; Registers used:
   867 ;;		wreg, status,2, status,0, pclath, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   873 ;;      Params:         0       0       0       0
   874 ;;      Locals:         0       0       0       0
   875 ;;      Temps:          0       0       0       0
   876 ;;      Totals:         0       0       0       0
   877 ;;Total ram usage:        0 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    4
   880 ;; This function calls:
   881 ;;		_lcd_comando
   882 ;;		_lcd_escrevedado
   883 ;; This function is called by:
   884 ;;		_main
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           
   889                           ;psect for function _exibe_recebimento
   890  047A                     _exibe_recebimento:	
   891                           
   892                           ;vip.c: 611: RCSTAbits.SPEN = 0;
   893                           
   894                           ;incstack = 0
   895                           ; Regs used in _exibe_recebimento: [wreg+status,2+status,0+pclath+cstack]
   896  047A  1283               	bcf	3,5	;RP0=0, select bank0
   897  047B  1303               	bcf	3,6	;RP1=0, select bank0
   898  047C  1398               	bcf	24,7	;volatile
   899                           
   900                           ;vip.c: 612: lcd_comando(0x01);
   901  047D  3001               	movlw	1
   902  047E  25E2               	fcall	_lcd_comando
   903                           
   904                           ;vip.c: 613: lcd_comando(0x80);
   905  047F  3080               	movlw	128
   906  0480  25E2               	fcall	_lcd_comando
   907                           
   908                           ;vip.c: 614: if (reg == 0x43) {
   909  0481  3043               	movlw	67
   910  0482  1283               	bcf	3,5	;RP0=0, select bank0
   911  0483  1303               	bcf	3,6	;RP1=0, select bank0
   912  0484  0658               	xorwf	_reg,w
   913  0485  1D03               	btfss	3,2
   914  0486  2C93               	goto	l1942
   915                           
   916                           ;vip.c: 615: lcd_escrevedado('C');
   917  0487  3043               	movlw	67
   918  0488  25A4               	fcall	_lcd_escrevedado
   919                           
   920                           ;vip.c: 616: lcd_escrevedado('i');
   921  0489  3069               	movlw	105
   922  048A  25A4               	fcall	_lcd_escrevedado
   923                           
   924                           ;vip.c: 617: lcd_escrevedado('r');
   925  048B  3072               	movlw	114
   926  048C  25A4               	fcall	_lcd_escrevedado
   927                           
   928                           ;vip.c: 618: lcd_escrevedado('c');
   929  048D  3063               	movlw	99
   930  048E  25A4               	fcall	_lcd_escrevedado
   931                           
   932                           ;vip.c: 619: lcd_escrevedado('l');
   933  048F  306C               	movlw	108
   934  0490  25A4               	fcall	_lcd_escrevedado
   935                           
   936                           ;vip.c: 620: lcd_escrevedado('e');
   937  0491  3065               	movlw	101
   938  0492  2CF2               	goto	L4
   939  0493                     l1942:	
   940                           ;vip.c: 621: } else if (reg == 0x52) {
   941                           
   942  0493  3052               	movlw	82
   943  0494  1283               	bcf	3,5	;RP0=0, select bank0
   944  0495  1303               	bcf	3,6	;RP1=0, select bank0
   945  0496  0658               	xorwf	_reg,w
   946  0497  1D03               	btfss	3,2
   947  0498  2CA7               	goto	l1946
   948                           
   949                           ;vip.c: 622: lcd_escrevedado('S');
   950  0499  3053               	movlw	83
   951  049A  25A4               	fcall	_lcd_escrevedado
   952                           
   953                           ;vip.c: 623: lcd_escrevedado('w');
   954  049B  3077               	movlw	119
   955  049C  25A4               	fcall	_lcd_escrevedado
   956                           
   957                           ;vip.c: 624: lcd_escrevedado('i');
   958  049D  3069               	movlw	105
   959  049E  25A4               	fcall	_lcd_escrevedado
   960                           
   961                           ;vip.c: 625: lcd_escrevedado('p');
   962  049F  3070               	movlw	112
   963  04A0  25A4               	fcall	_lcd_escrevedado
   964                           
   965                           ;vip.c: 626: lcd_escrevedado('e');
   966  04A1  3065               	movlw	101
   967  04A2  25A4               	fcall	_lcd_escrevedado
   968                           
   969                           ;vip.c: 627: lcd_escrevedado('-');
   970  04A3  302D               	movlw	45
   971  04A4  25A4               	fcall	_lcd_escrevedado
   972                           
   973                           ;vip.c: 628: lcd_escrevedado('R');
   974  04A5  3052               	movlw	82
   975  04A6  2CF2               	goto	L4
   976  04A7                     l1946:	
   977                           ;vip.c: 629: } else if (reg == 0x4C) {
   978                           
   979  04A7  304C               	movlw	76
   980  04A8  1283               	bcf	3,5	;RP0=0, select bank0
   981  04A9  1303               	bcf	3,6	;RP1=0, select bank0
   982  04AA  0658               	xorwf	_reg,w
   983  04AB  1D03               	btfss	3,2
   984  04AC  2CBB               	goto	l1950
   985                           
   986                           ;vip.c: 630: lcd_escrevedado('S');
   987  04AD  3053               	movlw	83
   988  04AE  25A4               	fcall	_lcd_escrevedado
   989                           
   990                           ;vip.c: 631: lcd_escrevedado('w');
   991  04AF  3077               	movlw	119
   992  04B0  25A4               	fcall	_lcd_escrevedado
   993                           
   994                           ;vip.c: 632: lcd_escrevedado('i');
   995  04B1  3069               	movlw	105
   996  04B2  25A4               	fcall	_lcd_escrevedado
   997                           
   998                           ;vip.c: 633: lcd_escrevedado('p');
   999  04B3  3070               	movlw	112
  1000  04B4  25A4               	fcall	_lcd_escrevedado
  1001                           
  1002                           ;vip.c: 634: lcd_escrevedado('e');
  1003  04B5  3065               	movlw	101
  1004  04B6  25A4               	fcall	_lcd_escrevedado
  1005                           
  1006                           ;vip.c: 635: lcd_escrevedado('-');
  1007  04B7  302D               	movlw	45
  1008  04B8  25A4               	fcall	_lcd_escrevedado
  1009                           
  1010                           ;vip.c: 636: lcd_escrevedado('L');
  1011  04B9  304C               	movlw	76
  1012  04BA  2CF2               	goto	L4
  1013  04BB                     l1950:	
  1014                           ;vip.c: 637: } else if (reg == 0x54) {
  1015                           
  1016  04BB  3054               	movlw	84
  1017  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  1018  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  1019  04BE  0658               	xorwf	_reg,w
  1020  04BF  1D03               	btfss	3,2
  1021  04C0  2CC7               	goto	l1954
  1022                           
  1023                           ;vip.c: 638: lcd_escrevedado('T');
  1024  04C1  3054               	movlw	84
  1025  04C2  25A4               	fcall	_lcd_escrevedado
  1026                           
  1027                           ;vip.c: 639: lcd_escrevedado('a');
  1028  04C3  3061               	movlw	97
  1029  04C4  25A4               	fcall	_lcd_escrevedado
  1030                           
  1031                           ;vip.c: 640: lcd_escrevedado('p');
  1032  04C5  3070               	movlw	112
  1033  04C6  2CF2               	goto	L4
  1034  04C7                     l1954:	
  1035                           ;vip.c: 641: } else if (reg == 0x6B) {
  1036                           
  1037  04C7  306B               	movlw	107
  1038  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  1039  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  1040  04CA  0658               	xorwf	_reg,w
  1041  04CB  1D03               	btfss	3,2
  1042  04CC  2CDF               	goto	l1960
  1043                           
  1044                           ;vip.c: 642: lcd_escrevedado('L');
  1045  04CD  304C               	movlw	76
  1046  04CE  25A4               	fcall	_lcd_escrevedado
  1047                           
  1048                           ;vip.c: 643: lcd_escrevedado('e');
  1049  04CF  3065               	movlw	101
  1050  04D0  25A4               	fcall	_lcd_escrevedado
  1051                           
  1052                           ;vip.c: 644: lcd_escrevedado('a');
  1053  04D1  3061               	movlw	97
  1054  04D2  25A4               	fcall	_lcd_escrevedado
  1055                           
  1056                           ;vip.c: 645: lcd_escrevedado('p');
  1057  04D3  3070               	movlw	112
  1058  04D4  25A4               	fcall	_lcd_escrevedado
  1059                           
  1060                           ;vip.c: 646: lcd_escrevedado(' ');
  1061  04D5  3020               	movlw	32
  1062  04D6  25A4               	fcall	_lcd_escrevedado
  1063                           
  1064                           ;vip.c: 647: lcd_comando(0xC0);
  1065  04D7  30C0               	movlw	192
  1066  04D8  25E2               	fcall	_lcd_comando
  1067                           
  1068                           ;vip.c: 648: lcd_escrevedado('O');
  1069  04D9  304F               	movlw	79
  1070  04DA  25A4               	fcall	_lcd_escrevedado
  1071                           
  1072                           ;vip.c: 649: lcd_escrevedado('K');
  1073  04DB  304B               	movlw	75
  1074  04DC  25A4               	fcall	_lcd_escrevedado
  1075                           
  1076                           ;vip.c: 650: Flag_conectado = 1;
  1077  04DD  14FC               	bsf	_Flag_conectado/(0+8),_Flag_conectado& (0+7)
  1078                           
  1079                           ;vip.c: 651: } else {
  1080  04DE  2CF3               	goto	l1962
  1081  04DF                     l1960:	
  1082                           
  1083                           ;vip.c: 652: lcd_escrevedado('U');
  1084  04DF  3055               	movlw	85
  1085  04E0  25A4               	fcall	_lcd_escrevedado
  1086                           
  1087                           ;vip.c: 653: lcd_escrevedado('n');
  1088  04E1  306E               	movlw	110
  1089  04E2  25A4               	fcall	_lcd_escrevedado
  1090                           
  1091                           ;vip.c: 654: lcd_escrevedado('k');
  1092  04E3  306B               	movlw	107
  1093  04E4  25A4               	fcall	_lcd_escrevedado
  1094                           
  1095                           ;vip.c: 655: lcd_escrevedado('n');
  1096  04E5  306E               	movlw	110
  1097  04E6  25A4               	fcall	_lcd_escrevedado
  1098                           
  1099                           ;vip.c: 656: lcd_escrevedado('o');
  1100  04E7  306F               	movlw	111
  1101  04E8  25A4               	fcall	_lcd_escrevedado
  1102                           
  1103                           ;vip.c: 657: lcd_escrevedado('w');
  1104  04E9  3077               	movlw	119
  1105  04EA  25A4               	fcall	_lcd_escrevedado
  1106                           
  1107                           ;vip.c: 658: lcd_escrevedado('n');
  1108  04EB  306E               	movlw	110
  1109  04EC  25A4               	fcall	_lcd_escrevedado
  1110                           
  1111                           ;vip.c: 659: lcd_escrevedado(':');
  1112  04ED  303A               	movlw	58
  1113  04EE  25A4               	fcall	_lcd_escrevedado
  1114                           
  1115                           ;vip.c: 660: lcd_escrevedado(reg);
  1116  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  1117  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  1118  04F1  0858               	movf	_reg,w
  1119  04F2                     L4:	
  1120  04F2  25A4               	fcall	_lcd_escrevedado
  1121  04F3                     l1962:	
  1122                           
  1123                           ;vip.c: 661: }
  1124                           ;vip.c: 662: RCSTAbits.SPEN = 1;
  1125  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  1126  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  1127  04F5  1798               	bsf	24,7	;volatile
  1128  04F6  0008               	return
  1129  04F7                     __end_of_exibe_recebimento:	
  1130                           
  1131                           	psect	text2
  1132  03DF                     __ptext2:	
  1133 ;; *************** function _exibe_configuracao *****************
  1134 ;; Defined at:
  1135 ;;		line 436 in file "vip.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;		None               void
  1142 ;; Registers used:
  1143 ;;		wreg, status,2, status,0, pclath, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1149 ;;      Params:         0       0       0       0
  1150 ;;      Locals:         0       0       0       0
  1151 ;;      Temps:          0       3       0       0
  1152 ;;      Totals:         0       3       0       0
  1153 ;;Total ram usage:        3 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    5
  1156 ;; This function calls:
  1157 ;;		_Write_EEPROM
  1158 ;;		_exibe_status
  1159 ;;		_lcd_comando
  1160 ;;		_lcd_escrevedado
  1161 ;; This function is called by:
  1162 ;;		_main
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           
  1167                           ;psect for function _exibe_configuracao
  1168  03DF                     _exibe_configuracao:	
  1169                           
  1170                           ;vip.c: 444: display_value = 1;
  1171                           
  1172                           ;incstack = 0
  1173                           ; Regs used in _exibe_configuracao: [wreg+status,2+status,0+pclath+cstack]
  1174  03DF  167C               	bsf	_display_value/(0+8),_display_value& (0+7)
  1175                           
  1176                           ;vip.c: 445: RCSTAbits.SPEN = 0;
  1177  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  1178  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  1179  03E2  1398               	bcf	24,7	;volatile
  1180                           
  1181                           ;vip.c: 446: lcd_comando(0x01);
  1182  03E3  3001               	movlw	1
  1183  03E4  25E2               	fcall	_lcd_comando
  1184                           
  1185                           ;vip.c: 447: lcd_comando(0x80);
  1186  03E5  3080               	movlw	128
  1187  03E6  25E2               	fcall	_lcd_comando
  1188                           
  1189                           ;vip.c: 449: lcd_escrevedado('C');
  1190  03E7  3043               	movlw	67
  1191  03E8  25A4               	fcall	_lcd_escrevedado
  1192                           
  1193                           ;vip.c: 450: lcd_escrevedado('o');
  1194  03E9  306F               	movlw	111
  1195  03EA  25A4               	fcall	_lcd_escrevedado
  1196                           
  1197                           ;vip.c: 451: lcd_escrevedado('n');
  1198  03EB  306E               	movlw	110
  1199  03EC  25A4               	fcall	_lcd_escrevedado
  1200                           
  1201                           ;vip.c: 452: lcd_escrevedado('f');
  1202  03ED  3066               	movlw	102
  1203  03EE  25A4               	fcall	_lcd_escrevedado
  1204                           
  1205                           ;vip.c: 453: lcd_escrevedado('i');
  1206  03EF  3069               	movlw	105
  1207  03F0  25A4               	fcall	_lcd_escrevedado
  1208                           
  1209                           ;vip.c: 454: lcd_escrevedado('g');
  1210  03F1  3067               	movlw	103
  1211  03F2  25A4               	fcall	_lcd_escrevedado
  1212                           
  1213                           ;vip.c: 455: lcd_escrevedado(' ');
  1214  03F3  3020               	movlw	32
  1215  03F4  25A4               	fcall	_lcd_escrevedado
  1216                           
  1217                           ;vip.c: 457: if ((config == 1) || (config == 2)) {
  1218  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  1219  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  1220  03F7  0356               	decf	_config,w
  1221  03F8  0457               	iorwf	_config+1,w
  1222  03F9  1903               	btfsc	3,2
  1223  03FA  2C00               	goto	l1972
  1224  03FB  3002               	movlw	2
  1225  03FC  0656               	xorwf	_config,w
  1226  03FD  0457               	iorwf	_config+1,w
  1227  03FE  1D03               	btfss	3,2
  1228  03FF  2C0D               	goto	l1974
  1229  0400                     l1972:	
  1230                           
  1231                           ;vip.c: 458: lcd_escrevedado('M');
  1232  0400  304D               	movlw	77
  1233  0401  25A4               	fcall	_lcd_escrevedado
  1234                           
  1235                           ;vip.c: 459: lcd_escrevedado('o');
  1236  0402  306F               	movlw	111
  1237  0403  25A4               	fcall	_lcd_escrevedado
  1238                           
  1239                           ;vip.c: 460: lcd_escrevedado('t');
  1240  0404  3074               	movlw	116
  1241  0405  25A4               	fcall	_lcd_escrevedado
  1242                           
  1243                           ;vip.c: 461: lcd_escrevedado('o');
  1244  0406  306F               	movlw	111
  1245  0407  25A4               	fcall	_lcd_escrevedado
  1246                           
  1247                           ;vip.c: 462: lcd_escrevedado('r');
  1248  0408  3072               	movlw	114
  1249  0409  25A4               	fcall	_lcd_escrevedado
  1250                           
  1251                           ;vip.c: 463: lcd_escrevedado('0');
  1252  040A  3030               	movlw	48
  1253  040B  25A4               	fcall	_lcd_escrevedado
  1254                           
  1255                           ;vip.c: 464: } else if ((config == 3) || (config == 4)) {
  1256  040C  2C75               	goto	l1996
  1257  040D                     l1974:	
  1258  040D  3003               	movlw	3
  1259  040E  1283               	bcf	3,5	;RP0=0, select bank0
  1260  040F  1303               	bcf	3,6	;RP1=0, select bank0
  1261  0410  0656               	xorwf	_config,w
  1262  0411  0457               	iorwf	_config+1,w
  1263  0412  1903               	btfsc	3,2
  1264  0413  2C19               	goto	l1978
  1265  0414  3004               	movlw	4
  1266  0415  0656               	xorwf	_config,w
  1267  0416  0457               	iorwf	_config+1,w
  1268  0417  1D03               	btfss	3,2
  1269  0418  2C2A               	goto	l1980
  1270  0419                     l1978:	
  1271                           
  1272                           ;vip.c: 465: lcd_escrevedado('M');
  1273  0419  304D               	movlw	77
  1274  041A  25A4               	fcall	_lcd_escrevedado
  1275                           
  1276                           ;vip.c: 466: lcd_escrevedado('T');
  1277  041B  3054               	movlw	84
  1278  041C  25A4               	fcall	_lcd_escrevedado
  1279                           
  1280                           ;vip.c: 467: lcd_escrevedado(':');
  1281  041D  303A               	movlw	58
  1282  041E  25A4               	fcall	_lcd_escrevedado
  1283                           
  1284                           ;vip.c: 468: lcd_escrevedado('1');
  1285  041F  3031               	movlw	49
  1286  0420  25A4               	fcall	_lcd_escrevedado
  1287                           
  1288                           ;vip.c: 469: lcd_escrevedado('/');
  1289  0421  302F               	movlw	47
  1290  0422  25A4               	fcall	_lcd_escrevedado
  1291                           
  1292                           ;vip.c: 470: lcd_escrevedado('2');
  1293  0423  3032               	movlw	50
  1294  0424  25A4               	fcall	_lcd_escrevedado
  1295                           
  1296                           ;vip.c: 471: lcd_escrevedado('/');
  1297  0425  302F               	movlw	47
  1298  0426  25A4               	fcall	_lcd_escrevedado
  1299                           
  1300                           ;vip.c: 472: lcd_escrevedado('3');
  1301  0427  3033               	movlw	51
  1302  0428  25A4               	fcall	_lcd_escrevedado
  1303                           
  1304                           ;vip.c: 473: } else if (config == 5) {
  1305  0429  2C75               	goto	l1996
  1306  042A                     l1980:	
  1307  042A  3005               	movlw	5
  1308  042B  1283               	bcf	3,5	;RP0=0, select bank0
  1309  042C  1303               	bcf	3,6	;RP1=0, select bank0
  1310  042D  0656               	xorwf	_config,w
  1311  042E  0457               	iorwf	_config+1,w
  1312  042F  1D03               	btfss	3,2
  1313  0430  2C6E               	goto	l1992
  1314                           
  1315                           ;vip.c: 474: lcd_escrevedado('S');
  1316  0431  3053               	movlw	83
  1317  0432  25A4               	fcall	_lcd_escrevedado
  1318                           
  1319                           ;vip.c: 475: lcd_escrevedado('a');
  1320  0433  3061               	movlw	97
  1321  0434  25A4               	fcall	_lcd_escrevedado
  1322                           
  1323                           ;vip.c: 476: lcd_escrevedado('l');
  1324  0435  306C               	movlw	108
  1325  0436  25A4               	fcall	_lcd_escrevedado
  1326                           
  1327                           ;vip.c: 477: lcd_escrevedado('v');
  1328  0437  3076               	movlw	118
  1329  0438  25A4               	fcall	_lcd_escrevedado
  1330                           
  1331                           ;vip.c: 478: lcd_escrevedado('a');
  1332  0439  3061               	movlw	97
  1333  043A  25A4               	fcall	_lcd_escrevedado
  1334                           
  1335                           ;vip.c: 479: display_value = 0;
  1336  043B  127C               	bcf	_display_value/(0+8),_display_value& (0+7)
  1337                           
  1338                           ;vip.c: 481: Write_EEPROM(0x00, PWM_main_motor);
  1339  043C  1283               	bcf	3,5	;RP0=0, select bank0
  1340  043D  1303               	bcf	3,6	;RP1=0, select bank0
  1341  043E  0848               	movf	_PWM_main_motor,w
  1342  043F  00AC               	movwf	??_exibe_configuracao
  1343  0440  082C               	movf	??_exibe_configuracao,w
  1344  0441  00A6               	movwf	Write_EEPROM@data
  1345  0442  3000               	movlw	0
  1346  0443  26AC               	fcall	_Write_EEPROM
  1347                           
  1348                           ;vip.c: 482: Write_EEPROM(0x01, Time_main_motor);
  1349  0444  1283               	bcf	3,5	;RP0=0, select bank0
  1350  0445  1303               	bcf	3,6	;RP1=0, select bank0
  1351  0446  084C               	movf	_Time_main_motor,w
  1352  0447  00AC               	movwf	??_exibe_configuracao
  1353  0448  082C               	movf	??_exibe_configuracao,w
  1354  0449  00A6               	movwf	Write_EEPROM@data
  1355  044A  3001               	movlw	1
  1356  044B  26AC               	fcall	_Write_EEPROM
  1357                           
  1358                           ;vip.c: 483: Write_EEPROM(0x02, PWM_motors);
  1359  044C  1283               	bcf	3,5	;RP0=0, select bank0
  1360  044D  1303               	bcf	3,6	;RP1=0, select bank0
  1361  044E  084A               	movf	_PWM_motors,w
  1362  044F  00AC               	movwf	??_exibe_configuracao
  1363  0450  082C               	movf	??_exibe_configuracao,w
  1364  0451  00A6               	movwf	Write_EEPROM@data
  1365  0452  3002               	movlw	2
  1366  0453  26AC               	fcall	_Write_EEPROM
  1367                           
  1368                           ;vip.c: 484: Write_EEPROM(0x03, Time_motors);
  1369  0454  1283               	bcf	3,5	;RP0=0, select bank0
  1370  0455  1303               	bcf	3,6	;RP1=0, select bank0
  1371  0456  084E               	movf	_Time_motors,w
  1372  0457  00AC               	movwf	??_exibe_configuracao
  1373  0458  082C               	movf	??_exibe_configuracao,w
  1374  0459  00A6               	movwf	Write_EEPROM@data
  1375  045A  3003               	movlw	3
  1376  045B  26AC               	fcall	_Write_EEPROM
  1377                           
  1378                           ;vip.c: 485: config = 0;
  1379  045C  1283               	bcf	3,5	;RP0=0, select bank0
  1380  045D  1303               	bcf	3,6	;RP1=0, select bank0
  1381  045E  01D6               	clrf	_config
  1382  045F  01D7               	clrf	_config+1
  1383                           
  1384                           ;vip.c: 486: _delay((unsigned long)((1500)*(4000000/4000.0)));
  1385  0460  3008               	movlw	8
  1386  0461  00AE               	movwf	??_exibe_configuracao+2
  1387  0462  309D               	movlw	157
  1388  0463  00AD               	movwf	??_exibe_configuracao+1
  1389  0464  300B               	movlw	11
  1390  0465  00AC               	movwf	??_exibe_configuracao
  1391  0466                     u2057:	
  1392  0466  0BAC               	decfsz	??_exibe_configuracao,f
  1393  0467  2C66               	goto	u2057
  1394  0468  0BAD               	decfsz	??_exibe_configuracao+1,f
  1395  0469  2C66               	goto	u2057
  1396  046A  0BAE               	decfsz	??_exibe_configuracao+2,f
  1397  046B  2C66               	goto	u2057
  1398  046C  2C6D               	nop2
  1399  046D  2C74               	goto	l1994
  1400  046E                     l1992:	
  1401                           ;vip.c: 488: } else if (config == 0) {
  1402                           
  1403                           ;vip.c: 487: exibe_status();
  1404                           
  1405  046E  1283               	bcf	3,5	;RP0=0, select bank0
  1406  046F  1303               	bcf	3,6	;RP1=0, select bank0
  1407  0470  0856               	movf	_config,w
  1408  0471  0457               	iorwf	_config+1,w
  1409  0472  1D03               	btfss	3,2
  1410  0473  2C75               	goto	l1996
  1411  0474                     l1994:	
  1412                           
  1413                           ;vip.c: 489: exibe_status();
  1414  0474  26D5               	fcall	_exibe_status
  1415  0475                     l1996:	
  1416                           
  1417                           ;vip.c: 490: }
  1418                           ;vip.c: 491: display_config = 0;
  1419  0475  11FC               	bcf	_display_config/(0+8),_display_config& (0+7)
  1420                           
  1421                           ;vip.c: 492: RCSTAbits.SPEN = 1;
  1422  0476  1283               	bcf	3,5	;RP0=0, select bank0
  1423  0477  1303               	bcf	3,6	;RP1=0, select bank0
  1424  0478  1798               	bsf	24,7	;volatile
  1425  0479  0008               	return
  1426  047A                     __end_of_exibe_configuracao:	
  1427                           
  1428                           	psect	text3
  1429  04F7                     __ptext3:	
  1430 ;; *************** function _exibe_config_valor *****************
  1431 ;; Defined at:
  1432 ;;		line 519 in file "vip.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;		None
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;		None
  1437 ;; Return value:  Size  Location     Type
  1438 ;;		None               void
  1439 ;; Registers used:
  1440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1446 ;;      Params:         0       0       0       0
  1447 ;;      Locals:         0       0       0       0
  1448 ;;      Temps:          0       0       0       0
  1449 ;;      Totals:         0       0       0       0
  1450 ;;Total ram usage:        0 bytes
  1451 ;; Hardware stack levels used:    1
  1452 ;; Hardware stack levels required when called:    6
  1453 ;; This function calls:
  1454 ;;		_IntToChar
  1455 ;;		_lcd_comando
  1456 ;;		_lcd_escrevedado
  1457 ;; This function is called by:
  1458 ;;		_main
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           
  1463                           ;psect for function _exibe_config_valor
  1464  04F7                     _exibe_config_valor:	
  1465                           
  1466                           ;vip.c: 520: RCSTAbits.SPEN = 0;
  1467                           
  1468                           ;incstack = 0
  1469                           ; Regs used in _exibe_config_valor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1470  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  1471  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  1472  04F9  1398               	bcf	24,7	;volatile
  1473                           
  1474                           ;vip.c: 521: lcd_comando(0xC0);
  1475  04FA  30C0               	movlw	192
  1476  04FB  25E2               	fcall	_lcd_comando
  1477                           
  1478                           ;vip.c: 522: if ((config == 1) || (config == 3)) {
  1479  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  1480  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  1481  04FE  0356               	decf	_config,w
  1482  04FF  0457               	iorwf	_config+1,w
  1483  0500  1903               	btfsc	3,2
  1484  0501  2D07               	goto	l2008
  1485  0502  3003               	movlw	3
  1486  0503  0656               	xorwf	_config,w
  1487  0504  0457               	iorwf	_config+1,w
  1488  0505  1D03               	btfss	3,2
  1489  0506  2D0D               	goto	l2010
  1490  0507                     l2008:	
  1491                           
  1492                           ;vip.c: 524: lcd_escrevedado('V');
  1493  0507  3056               	movlw	86
  1494  0508  25A4               	fcall	_lcd_escrevedado
  1495                           
  1496                           ;vip.c: 525: lcd_escrevedado('e');
  1497  0509  3065               	movlw	101
  1498  050A  25A4               	fcall	_lcd_escrevedado
  1499                           
  1500                           ;vip.c: 526: lcd_escrevedado('l');
  1501  050B  306C               	movlw	108
  1502  050C  2D22               	goto	L5
  1503  050D                     l2010:	
  1504                           ;vip.c: 528: } else if ((config == 2) || (config == 4)) {
  1505                           
  1506                           ;vip.c: 527: lcd_escrevedado(':');
  1507                           
  1508  050D  3002               	movlw	2
  1509  050E  1283               	bcf	3,5	;RP0=0, select bank0
  1510  050F  1303               	bcf	3,6	;RP1=0, select bank0
  1511  0510  0656               	xorwf	_config,w
  1512  0511  0457               	iorwf	_config+1,w
  1513  0512  1903               	btfsc	3,2
  1514  0513  2D19               	goto	l2014
  1515  0514  3004               	movlw	4
  1516  0515  0656               	xorwf	_config,w
  1517  0516  0457               	iorwf	_config+1,w
  1518  0517  1D03               	btfss	3,2
  1519  0518  2D25               	goto	l2016
  1520  0519                     l2014:	
  1521                           
  1522                           ;vip.c: 530: lcd_escrevedado('T');
  1523  0519  3054               	movlw	84
  1524  051A  25A4               	fcall	_lcd_escrevedado
  1525                           
  1526                           ;vip.c: 531: lcd_escrevedado('e');
  1527  051B  3065               	movlw	101
  1528  051C  25A4               	fcall	_lcd_escrevedado
  1529                           
  1530                           ;vip.c: 532: lcd_escrevedado('m');
  1531  051D  306D               	movlw	109
  1532  051E  25A4               	fcall	_lcd_escrevedado
  1533                           
  1534                           ;vip.c: 533: lcd_escrevedado('p');
  1535  051F  3070               	movlw	112
  1536  0520  25A4               	fcall	_lcd_escrevedado
  1537                           
  1538                           ;vip.c: 534: lcd_escrevedado('o');
  1539  0521  306F               	movlw	111
  1540  0522                     L5:	
  1541  0522  25A4               	fcall	_lcd_escrevedado
  1542                           
  1543                           ;vip.c: 535: lcd_escrevedado(':');
  1544  0523  303A               	movlw	58
  1545  0524  25A4               	fcall	_lcd_escrevedado
  1546  0525                     l2016:	
  1547                           
  1548                           ;vip.c: 536: }
  1549                           ;vip.c: 537: if (config == 1) {
  1550  0525  1283               	bcf	3,5	;RP0=0, select bank0
  1551  0526  1303               	bcf	3,6	;RP1=0, select bank0
  1552  0527  0356               	decf	_config,w
  1553  0528  0457               	iorwf	_config+1,w
  1554  0529  1D03               	btfss	3,2
  1555  052A  2D2F               	goto	l2020
  1556                           
  1557                           ;vip.c: 538: IntToChar(PWM_main_motor);
  1558  052B  0849               	movf	_PWM_main_motor+1,w
  1559  052C  00C4               	movwf	IntToChar@value+1
  1560  052D  0848               	movf	_PWM_main_motor,w
  1561  052E  2D4F               	goto	L6
  1562  052F                     l2020:	
  1563                           ;vip.c: 539: } else if (config == 2) {
  1564                           
  1565  052F  3002               	movlw	2
  1566  0530  1283               	bcf	3,5	;RP0=0, select bank0
  1567  0531  1303               	bcf	3,6	;RP1=0, select bank0
  1568  0532  0656               	xorwf	_config,w
  1569  0533  0457               	iorwf	_config+1,w
  1570  0534  1D03               	btfss	3,2
  1571  0535  2D3A               	goto	l2024
  1572                           
  1573                           ;vip.c: 540: IntToChar(Time_main_motor);
  1574  0536  084D               	movf	_Time_main_motor+1,w
  1575  0537  00C4               	movwf	IntToChar@value+1
  1576  0538  084C               	movf	_Time_main_motor,w
  1577  0539  2D4F               	goto	L6
  1578  053A                     l2024:	
  1579                           ;vip.c: 541: } else if (config == 3) {
  1580                           
  1581  053A  3003               	movlw	3
  1582  053B  1283               	bcf	3,5	;RP0=0, select bank0
  1583  053C  1303               	bcf	3,6	;RP1=0, select bank0
  1584  053D  0656               	xorwf	_config,w
  1585  053E  0457               	iorwf	_config+1,w
  1586  053F  1D03               	btfss	3,2
  1587  0540  2D45               	goto	l2028
  1588                           
  1589                           ;vip.c: 542: IntToChar(PWM_motors);
  1590  0541  084B               	movf	_PWM_motors+1,w
  1591  0542  00C4               	movwf	IntToChar@value+1
  1592  0543  084A               	movf	_PWM_motors,w
  1593  0544  2D4F               	goto	L6
  1594  0545                     l2028:	
  1595                           ;vip.c: 543: } else if (config == 4) {
  1596                           
  1597  0545  3004               	movlw	4
  1598  0546  1283               	bcf	3,5	;RP0=0, select bank0
  1599  0547  1303               	bcf	3,6	;RP1=0, select bank0
  1600  0548  0656               	xorwf	_config,w
  1601  0549  0457               	iorwf	_config+1,w
  1602  054A  1D03               	btfss	3,2
  1603  054B  2D51               	goto	l2032
  1604                           
  1605                           ;vip.c: 544: IntToChar(Time_motors);
  1606  054C  084F               	movf	_Time_motors+1,w
  1607  054D  00C4               	movwf	IntToChar@value+1
  1608  054E  084E               	movf	_Time_motors,w
  1609  054F                     L6:	
  1610  054F  00C3               	movwf	IntToChar@value
  1611  0550  2794               	fcall	_IntToChar
  1612  0551                     l2032:	
  1613                           
  1614                           ;vip.c: 545: }
  1615                           ;vip.c: 547: lcd_escrevedado(Matrix_Char[0]);
  1616  0551  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0552  1303               	bcf	3,6	;RP1=0, select bank0
  1618  0553  0859               	movf	_Matrix_Char,w
  1619  0554  25A4               	fcall	_lcd_escrevedado
  1620                           
  1621                           ;vip.c: 548: lcd_escrevedado(Matrix_Char[1]);
  1622  0555  1283               	bcf	3,5	;RP0=0, select bank0
  1623  0556  1303               	bcf	3,6	;RP1=0, select bank0
  1624  0557  085A               	movf	_Matrix_Char+1,w
  1625  0558  25A4               	fcall	_lcd_escrevedado
  1626                           
  1627                           ;vip.c: 549: lcd_escrevedado(Matrix_Char[2]);
  1628  0559  1283               	bcf	3,5	;RP0=0, select bank0
  1629  055A  1303               	bcf	3,6	;RP1=0, select bank0
  1630  055B  085B               	movf	_Matrix_Char+2,w
  1631  055C  25A4               	fcall	_lcd_escrevedado
  1632                           
  1633                           ;vip.c: 550: lcd_escrevedado(Matrix_Char[3]);
  1634  055D  1283               	bcf	3,5	;RP0=0, select bank0
  1635  055E  1303               	bcf	3,6	;RP1=0, select bank0
  1636  055F  085C               	movf	_Matrix_Char+3,w
  1637  0560  25A4               	fcall	_lcd_escrevedado
  1638                           
  1639                           ;vip.c: 551: RCSTAbits.SPEN = 1;
  1640  0561  1283               	bcf	3,5	;RP0=0, select bank0
  1641  0562  1303               	bcf	3,6	;RP1=0, select bank0
  1642  0563  1798               	bsf	24,7	;volatile
  1643                           
  1644                           ;vip.c: 552: display_value = 0;
  1645  0564  127C               	bcf	_display_value/(0+8),_display_value& (0+7)
  1646  0565  0008               	return
  1647  0566                     __end_of_exibe_config_valor:	
  1648                           
  1649                           	psect	text4
  1650  0794                     __ptext4:	
  1651 ;; *************** function _IntToChar *****************
  1652 ;; Defined at:
  1653 ;;		line 557 in file "vip.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  value           2   35[BANK0 ] int 
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;		None
  1658 ;; Return value:  Size  Location     Type
  1659 ;;		None               void
  1660 ;; Registers used:
  1661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1667 ;;      Params:         0       2       0       0
  1668 ;;      Locals:         0       0       0       0
  1669 ;;      Temps:          0       1       0       0
  1670 ;;      Totals:         0       3       0       0
  1671 ;;Total ram usage:        3 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    5
  1674 ;; This function calls:
  1675 ;;		_sprintf
  1676 ;; This function is called by:
  1677 ;;		_exibe_config_valor
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           
  1682                           ;psect for function _IntToChar
  1683  0794                     _IntToChar:	
  1684                           
  1685                           ;vip.c: 558: sprintf(Matrix_Char, "%4i", value);
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in _IntToChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1689  0794  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1690  0795  1283               	bcf	3,5	;RP0=0, select bank0
  1691  0796  1303               	bcf	3,6	;RP1=0, select bank0
  1692  0797  00C5               	movwf	??_IntToChar
  1693  0798  0845               	movf	??_IntToChar,w
  1694  0799  00B4               	movwf	sprintf@f
  1695  079A  0844               	movf	IntToChar@value+1,w
  1696  079B  00B6               	movwf	?_sprintf+2
  1697  079C  0843               	movf	IntToChar@value,w
  1698  079D  00B5               	movwf	?_sprintf+1
  1699  079E  3059               	movlw	(low (_Matrix_Char| 0))& (0+255)
  1700  079F  2019               	fcall	_sprintf
  1701  07A0  0008               	return
  1702  07A1                     __end_of_IntToChar:	
  1703                           
  1704                           	psect	text5
  1705  0019                     __ptext5:	
  1706 ;; *************** function _sprintf *****************
  1707 ;; Defined at:
  1708 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;  sp              1    wreg     PTR unsigned char 
  1711 ;;		 -> Matrix_Char(4), 
  1712 ;;  f               1   20[BANK0 ] PTR const unsigned char 
  1713 ;;		 -> STR_1(4), 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  sp              1   31[BANK0 ] PTR unsigned char 
  1716 ;;		 -> Matrix_Char(4), 
  1717 ;;  tmpval          4    0        struct .
  1718 ;;  width           2   32[BANK0 ] int 
  1719 ;;  val             2   29[BANK0 ] unsigned int 
  1720 ;;  cp              2    0        PTR const unsigned char 
  1721 ;;  len             2    0        unsigned int 
  1722 ;;  c               1   34[BANK0 ] char 
  1723 ;;  flag            1   28[BANK0 ] unsigned char 
  1724 ;;  prec            1   27[BANK0 ] char 
  1725 ;;  ap              1   26[BANK0 ] PTR void [1]
  1726 ;;		 -> ?_sprintf(2), 
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  2   20[BANK0 ] int 
  1729 ;; Registers used:
  1730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1736 ;;      Params:         0       3       0       0
  1737 ;;      Locals:         0       9       0       0
  1738 ;;      Temps:          0       3       0       0
  1739 ;;      Totals:         0      15       0       0
  1740 ;;Total ram usage:       15 bytes
  1741 ;; Hardware stack levels used:    1
  1742 ;; Hardware stack levels required when called:    4
  1743 ;; This function calls:
  1744 ;;		___lwdiv
  1745 ;;		___lwmod
  1746 ;;		___wmul
  1747 ;;		_isdigit
  1748 ;; This function is called by:
  1749 ;;		_IntToChar
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function _sprintf
  1755  0019                     _sprintf:	
  1756                           
  1757                           ;incstack = 0
  1758                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1759                           ;sprintf@sp stored from wreg
  1760  0019  1283               	bcf	3,5	;RP0=0, select bank0
  1761  001A  1303               	bcf	3,6	;RP1=0, select bank0
  1762  001B  00BF               	movwf	sprintf@sp
  1763                           
  1764                           ;doprnt.c: 494: va_list ap;
  1765                           ;doprnt.c: 499: signed char c;
  1766                           ;doprnt.c: 501: int width;
  1767                           ;doprnt.c: 506: signed char prec;
  1768                           ;doprnt.c: 508: unsigned char flag;
  1769                           ;doprnt.c: 523: union {
  1770                           ;doprnt.c: 524: unsigned long vd;
  1771                           ;doprnt.c: 525: double integ;
  1772                           ;doprnt.c: 526: } tmpval;
  1773                           ;doprnt.c: 528: unsigned int val;
  1774                           ;doprnt.c: 529: unsigned len;
  1775                           ;doprnt.c: 530: const char * cp;
  1776                           ;doprnt.c: 533: *ap = __va_start();
  1777  001C  3035               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1778  001D  00B7               	movwf	??_sprintf
  1779  001E  0837               	movf	??_sprintf,w
  1780  001F  00BA               	movwf	sprintf@ap
  1781  0020                     l1722:	
  1782                           ;doprnt.c: 536: while(c = *f++) {
  1783                           
  1784  0020  3001               	movlw	1
  1785  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1786  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1787  0023  07B4               	addwf	sprintf@f,f
  1788  0024  30FF               	movlw	-1
  1789  0025  0734               	addwf	sprintf@f,w
  1790  0026  0084               	movwf	4
  1791  0027  2760               	fcall	stringdir
  1792  0028  00B7               	movwf	??_sprintf
  1793  0029  0837               	movf	??_sprintf,w
  1794  002A  00C2               	movwf	sprintf@c
  1795  002B  0842               	movf	sprintf@c,w
  1796  002C  1903               	btfsc	3,2
  1797  002D  2950               	goto	l1724
  1798                           
  1799                           ;doprnt.c: 538: if(c != '%')
  1800  002E  3025               	movlw	37
  1801  002F  0642               	xorwf	sprintf@c,w
  1802  0030  1903               	btfsc	3,2
  1803  0031  283E               	goto	l1648
  1804                           
  1805                           ;doprnt.c: 540: {
  1806                           ;doprnt.c: 541: ((*sp++ = (c)));
  1807  0032  0842               	movf	sprintf@c,w
  1808  0033  00B7               	movwf	??_sprintf
  1809  0034  083F               	movf	sprintf@sp,w
  1810  0035  0084               	movwf	4
  1811  0036  0837               	movf	??_sprintf,w
  1812  0037  1383               	bcf	3,7	;select IRP bank0
  1813  0038  0080               	movwf	0
  1814  0039  3001               	movlw	1
  1815  003A  00B7               	movwf	??_sprintf
  1816  003B  0837               	movf	??_sprintf,w
  1817  003C  07BF               	addwf	sprintf@sp,f
  1818                           
  1819                           ;doprnt.c: 542: continue;
  1820  003D  2820               	goto	l1722
  1821  003E                     l1648:	
  1822                           
  1823                           ;doprnt.c: 543: }
  1824                           ;doprnt.c: 546: width = 0;
  1825  003E  01C0               	clrf	sprintf@width
  1826  003F  01C1               	clrf	sprintf@width+1
  1827                           
  1828                           ;doprnt.c: 548: flag = 0;
  1829  0040  01BC               	clrf	sprintf@flag
  1830                           
  1831                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1832  0041  0834               	movf	sprintf@f,w
  1833  0042  0084               	movwf	4
  1834  0043  2760               	fcall	stringdir
  1835  0044  2774               	fcall	_isdigit
  1836  0045  1C03               	btfss	3,0
  1837  0046  2875               	goto	l1664
  1838                           
  1839                           ;doprnt.c: 598: width = 0;
  1840  0047  1283               	bcf	3,5	;RP0=0, select bank0
  1841  0048  1303               	bcf	3,6	;RP1=0, select bank0
  1842  0049  01C0               	clrf	sprintf@width
  1843  004A  01C1               	clrf	sprintf@width+1
  1844  004B                     l1654:	
  1845                           ;doprnt.c: 599: do {
  1846                           
  1847                           
  1848                           ;doprnt.c: 600: width *= 10;
  1849  004B  300A               	movlw	10
  1850  004C  1283               	bcf	3,5	;RP0=0, select bank0
  1851  004D  1303               	bcf	3,6	;RP1=0, select bank0
  1852  004E  00A6               	movwf	___wmul@multiplier
  1853  004F  3000               	movlw	0
  1854  0050  00A7               	movwf	___wmul@multiplier+1
  1855  0051  0841               	movf	sprintf@width+1,w
  1856  0052  00A9               	movwf	___wmul@multiplicand+1
  1857  0053  0840               	movf	sprintf@width,w
  1858  0054  00A8               	movwf	___wmul@multiplicand
  1859  0055  26FD               	fcall	___wmul
  1860  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1861  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1862  0058  0827               	movf	?___wmul+1,w
  1863  0059  00C1               	movwf	sprintf@width+1
  1864  005A  0826               	movf	?___wmul,w
  1865  005B  00C0               	movwf	sprintf@width
  1866                           
  1867                           ;doprnt.c: 601: width += *f++ - '0';
  1868  005C  0834               	movf	sprintf@f,w
  1869  005D  0084               	movwf	4
  1870  005E  2760               	fcall	stringdir
  1871  005F  3ED0               	addlw	208
  1872  0060  00B7               	movwf	??_sprintf
  1873  0061  30FF               	movlw	255
  1874  0062  1803               	skipnc
  1875  0063  3000               	movlw	0
  1876  0064  00B8               	movwf	??_sprintf+1
  1877  0065  0837               	movf	??_sprintf,w
  1878  0066  07C0               	addwf	sprintf@width,f
  1879  0067  1803               	skipnc
  1880  0068  0AC1               	incf	sprintf@width+1,f
  1881  0069  0838               	movf	??_sprintf+1,w
  1882  006A  07C1               	addwf	sprintf@width+1,f
  1883  006B  3001               	movlw	1
  1884  006C  00B7               	movwf	??_sprintf
  1885  006D  0837               	movf	??_sprintf,w
  1886  006E  07B4               	addwf	sprintf@f,f
  1887                           
  1888                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1889  006F  0834               	movf	sprintf@f,w
  1890  0070  0084               	movwf	4
  1891  0071  2760               	fcall	stringdir
  1892  0072  2774               	fcall	_isdigit
  1893  0073  1803               	btfsc	3,0
  1894  0074  284B               	goto	l1654
  1895  0075                     l1664:	
  1896                           ;doprnt.c: 822: }
  1897                           
  1898                           ;doprnt.c: 813: continue;
  1899                           
  1900                           ;doprnt.c: 802: default:
  1901                           
  1902                           ;doprnt.c: 698: case 'i':
  1903                           ;doprnt.c: 699: break;
  1904                           
  1905                           ;doprnt.c: 697: case 'd':
  1906                           
  1907                           ;doprnt.c: 638: goto alldone;
  1908                           
  1909                           ;doprnt.c: 637: case 0:
  1910                           
  1911                           ;doprnt.c: 608: }
  1912                           ;doprnt.c: 635: switch(c = *f++) {
  1913                           
  1914  0075  3001               	movlw	1
  1915  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1916  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1917  0078  07B4               	addwf	sprintf@f,f
  1918  0079  30FF               	movlw	-1
  1919  007A  0734               	addwf	sprintf@f,w
  1920  007B  0084               	movwf	4
  1921  007C  2760               	fcall	stringdir
  1922  007D  00C2               	movwf	sprintf@c
  1923                           
  1924                           ; Switch size 1, requested type "space"
  1925                           ; Number of cases is 3, Range of values is 0 to 105
  1926                           ; switch strategies available:
  1927                           ; Name         Instructions Cycles
  1928                           ; simple_byte           10     6 (average)
  1929                           ; direct_byte          112     6 (fixed)
  1930                           ; jumptable            260     6 (fixed)
  1931                           ;	Chosen strategy is simple_byte
  1932  007E  3A00               	xorlw	0	; case 0
  1933  007F  1903               	skipnz
  1934  0080  2950               	goto	l1724
  1935  0081  3A64               	xorlw	100	; case 100
  1936  0082  1903               	skipnz
  1937  0083  2888               	goto	l1666
  1938  0084  3A0D               	xorlw	13	; case 105
  1939  0085  1903               	skipnz
  1940  0086  2888               	goto	l1666
  1941  0087  2820               	goto	l1722
  1942  0088                     l1666:	
  1943                           
  1944                           ;doprnt.c: 1253: {
  1945                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1946  0088  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0089  1303               	bcf	3,6	;RP1=0, select bank0
  1948  008A  083A               	movf	sprintf@ap,w
  1949  008B  0084               	movwf	4
  1950  008C  1383               	bcf	3,7	;select IRP bank0
  1951  008D  0800               	movf	0,w
  1952  008E  00BD               	movwf	sprintf@val
  1953  008F  0A84               	incf	4,f
  1954  0090  0800               	movf	0,w
  1955  0091  00BE               	movwf	sprintf@val+1
  1956  0092  3002               	movlw	2
  1957  0093  00B7               	movwf	??_sprintf
  1958  0094  0837               	movf	??_sprintf,w
  1959  0095  07BA               	addwf	sprintf@ap,f
  1960                           
  1961                           ;doprnt.c: 1261: if((int)val < 0) {
  1962  0096  1FBE               	btfss	sprintf@val+1,7
  1963  0097  28A1               	goto	l1676
  1964                           
  1965                           ;doprnt.c: 1262: flag |= 0x03;
  1966  0098  3003               	movlw	3
  1967  0099  00B7               	movwf	??_sprintf
  1968  009A  0837               	movf	??_sprintf,w
  1969  009B  04BC               	iorwf	sprintf@flag,f
  1970                           
  1971                           ;doprnt.c: 1263: val = -val;
  1972  009C  09BD               	comf	sprintf@val,f
  1973  009D  09BE               	comf	sprintf@val+1,f
  1974  009E  0ABD               	incf	sprintf@val,f
  1975  009F  1903               	skipnz
  1976  00A0  0ABE               	incf	sprintf@val+1,f
  1977  00A1                     l1676:	
  1978                           
  1979                           ;doprnt.c: 1264: }
  1980                           ;doprnt.c: 1266: }
  1981                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1982  00A1  01C2               	clrf	sprintf@c
  1983  00A2  0AC2               	incf	sprintf@c,f
  1984  00A3  3005               	movlw	5
  1985  00A4  0642               	xorwf	sprintf@c,w
  1986  00A5  1903               	btfsc	3,2
  1987  00A6  28C0               	goto	l1688
  1988  00A7                     l1682:	
  1989                           
  1990                           ;doprnt.c: 1306: if(val < dpowers[c])
  1991  00A7  0842               	movf	sprintf@c,w
  1992  00A8  00B7               	movwf	??_sprintf
  1993  00A9  0737               	addwf	??_sprintf,w
  1994  00AA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1995  00AB  0084               	movwf	4
  1996  00AC  2760               	fcall	stringdir
  1997  00AD  00B8               	movwf	??_sprintf+1
  1998  00AE  2760               	fcall	stringdir
  1999  00AF  00B9               	movwf	??_sprintf+2
  2000  00B0  0839               	movf	??_sprintf+2,w
  2001  00B1  023E               	subwf	sprintf@val+1,w
  2002  00B2  1D03               	skipz
  2003  00B3  28B6               	goto	u1295
  2004  00B4  0838               	movf	??_sprintf+1,w
  2005  00B5  023D               	subwf	sprintf@val,w
  2006  00B6                     u1295:	
  2007  00B6  1C03               	btfss	3,0
  2008  00B7  28C0               	goto	l1688
  2009                           
  2010                           ;doprnt.c: 1307: break;
  2011  00B8  3001               	movlw	1
  2012  00B9  00B7               	movwf	??_sprintf
  2013  00BA  0837               	movf	??_sprintf,w
  2014  00BB  07C2               	addwf	sprintf@c,f
  2015  00BC  3005               	movlw	5
  2016  00BD  0642               	xorwf	sprintf@c,w
  2017  00BE  1D03               	btfss	3,2
  2018  00BF  28A7               	goto	l1682
  2019  00C0                     l1688:	
  2020                           
  2021                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2022  00C0  0840               	movf	sprintf@width,w
  2023  00C1  0441               	iorwf	sprintf@width+1,w
  2024  00C2  1903               	btfsc	3,2
  2025  00C3  28CE               	goto	l280
  2026  00C4  083C               	movf	sprintf@flag,w
  2027  00C5  3903               	andlw	3
  2028  00C6  1903               	btfsc	3,2
  2029  00C7  28CE               	goto	l280
  2030                           
  2031                           ;doprnt.c: 1346: width--;
  2032  00C8  30FF               	movlw	255
  2033  00C9  07C0               	addwf	sprintf@width,f
  2034  00CA  1803               	skipnc
  2035  00CB  0AC1               	incf	sprintf@width+1,f
  2036  00CC  30FF               	movlw	255
  2037  00CD  07C1               	addwf	sprintf@width+1,f
  2038  00CE                     l280:	
  2039                           
  2040                           ;doprnt.c: 1381: if(width > c)
  2041  00CE  0842               	movf	sprintf@c,w
  2042  00CF  00B7               	movwf	??_sprintf
  2043  00D0  01B8               	clrf	??_sprintf+1
  2044  00D1  1BB7               	btfsc	??_sprintf,7
  2045  00D2  03B8               	decf	??_sprintf+1,f
  2046  00D3  0838               	movf	??_sprintf+1,w
  2047  00D4  3A80               	xorlw	128
  2048  00D5  00B9               	movwf	??_sprintf+2
  2049  00D6  0841               	movf	sprintf@width+1,w
  2050  00D7  3A80               	xorlw	128
  2051  00D8  0239               	subwf	??_sprintf+2,w
  2052  00D9  1D03               	skipz
  2053  00DA  28DD               	goto	u1335
  2054  00DB  0840               	movf	sprintf@width,w
  2055  00DC  0237               	subwf	??_sprintf,w
  2056  00DD                     u1335:	
  2057  00DD  1803               	skipnc
  2058  00DE  28ED               	goto	l1696
  2059                           
  2060                           ;doprnt.c: 1382: width -= c;
  2061  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  2062  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  2063  00E1  0842               	movf	sprintf@c,w
  2064  00E2  00B7               	movwf	??_sprintf
  2065  00E3  01B8               	clrf	??_sprintf+1
  2066  00E4  1BB7               	btfsc	??_sprintf,7
  2067  00E5  03B8               	decf	??_sprintf+1,f
  2068  00E6  0837               	movf	??_sprintf,w
  2069  00E7  02C0               	subwf	sprintf@width,f
  2070  00E8  0838               	movf	??_sprintf+1,w
  2071  00E9  1C03               	skipc
  2072  00EA  03C1               	decf	sprintf@width+1,f
  2073  00EB  02C1               	subwf	sprintf@width+1,f
  2074  00EC  28F1               	goto	l1698
  2075  00ED                     l1696:	
  2076                           
  2077                           ;doprnt.c: 1383: else
  2078                           ;doprnt.c: 1384: width = 0;
  2079  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  2080  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  2081  00EF  01C0               	clrf	sprintf@width
  2082  00F0  01C1               	clrf	sprintf@width+1
  2083  00F1                     l1698:	
  2084                           
  2085                           ;doprnt.c: 1422: {
  2086                           ;doprnt.c: 1424: if(width
  2087                           ;doprnt.c: 1428: )
  2088  00F1  0840               	movf	sprintf@width,w
  2089  00F2  0441               	iorwf	sprintf@width+1,w
  2090  00F3  1903               	btfsc	3,2
  2091  00F4  290A               	goto	l1706
  2092  00F5                     l1700:	
  2093                           ;doprnt.c: 1429: do
  2094                           
  2095                           
  2096                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2097  00F5  3020               	movlw	32
  2098  00F6  00B7               	movwf	??_sprintf
  2099  00F7  083F               	movf	sprintf@sp,w
  2100  00F8  0084               	movwf	4
  2101  00F9  0837               	movf	??_sprintf,w
  2102  00FA  1383               	bcf	3,7	;select IRP bank0
  2103  00FB  0080               	movwf	0
  2104  00FC  3001               	movlw	1
  2105  00FD  00B7               	movwf	??_sprintf
  2106  00FE  0837               	movf	??_sprintf,w
  2107  00FF  07BF               	addwf	sprintf@sp,f
  2108                           
  2109                           ;doprnt.c: 1431: while(--width);
  2110  0100  30FF               	movlw	255
  2111  0101  07C0               	addwf	sprintf@width,f
  2112  0102  1803               	skipnc
  2113  0103  0AC1               	incf	sprintf@width+1,f
  2114  0104  30FF               	movlw	255
  2115  0105  07C1               	addwf	sprintf@width+1,f
  2116  0106  0840               	movf	sprintf@width,w
  2117  0107  0441               	iorwf	sprintf@width+1,w
  2118  0108  1D03               	btfss	3,2
  2119  0109  28F5               	goto	l1700
  2120  010A                     l1706:	
  2121                           
  2122                           ;doprnt.c: 1438: if(flag & 0x03)
  2123  010A  083C               	movf	sprintf@flag,w
  2124  010B  3903               	andlw	3
  2125  010C  1903               	btfsc	3,2
  2126  010D  2919               	goto	l1712
  2127                           
  2128                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2129  010E  302D               	movlw	45
  2130  010F  00B7               	movwf	??_sprintf
  2131  0110  083F               	movf	sprintf@sp,w
  2132  0111  0084               	movwf	4
  2133  0112  0837               	movf	??_sprintf,w
  2134  0113  1383               	bcf	3,7	;select IRP bank0
  2135  0114  0080               	movwf	0
  2136  0115  3001               	movlw	1
  2137  0116  00B7               	movwf	??_sprintf
  2138  0117  0837               	movf	??_sprintf,w
  2139  0118  07BF               	addwf	sprintf@sp,f
  2140  0119                     l1712:	
  2141                           
  2142                           ;doprnt.c: 1469: }
  2143                           ;doprnt.c: 1472: prec = c;
  2144  0119  0842               	movf	sprintf@c,w
  2145  011A  00B7               	movwf	??_sprintf
  2146  011B  0837               	movf	??_sprintf,w
  2147  011C  00BB               	movwf	sprintf@prec
  2148  011D                     l1720:	
  2149                           ;doprnt.c: 1474: while(prec--) {
  2150                           
  2151  011D  30FF               	movlw	255
  2152  011E  00B7               	movwf	??_sprintf
  2153  011F  0837               	movf	??_sprintf,w
  2154  0120  07BB               	addwf	sprintf@prec,f
  2155  0121  0A3B               	incf	sprintf@prec,w
  2156  0122  1903               	btfsc	3,2
  2157  0123  2820               	goto	l1722
  2158                           
  2159                           ;doprnt.c: 1478: {
  2160                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2161  0124  300A               	movlw	10
  2162  0125  00AE               	movwf	___lwmod@divisor
  2163  0126  3000               	movlw	0
  2164  0127  00AF               	movwf	___lwmod@divisor+1
  2165  0128  083B               	movf	sprintf@prec,w
  2166  0129  00B7               	movwf	??_sprintf
  2167  012A  0737               	addwf	??_sprintf,w
  2168  012B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2169  012C  0084               	movwf	4
  2170  012D  2760               	fcall	stringdir
  2171  012E  00A6               	movwf	___lwdiv@divisor
  2172  012F  2760               	fcall	stringdir
  2173  0130  00A7               	movwf	___lwdiv@divisor+1
  2174  0131  083E               	movf	sprintf@val+1,w
  2175  0132  00A9               	movwf	___lwdiv@dividend+1
  2176  0133  083D               	movf	sprintf@val,w
  2177  0134  00A8               	movwf	___lwdiv@dividend
  2178  0135  2566               	fcall	___lwdiv
  2179  0136  1283               	bcf	3,5	;RP0=0, select bank0
  2180  0137  1303               	bcf	3,6	;RP1=0, select bank0
  2181  0138  0827               	movf	?___lwdiv+1,w
  2182  0139  00B1               	movwf	___lwmod@dividend+1
  2183  013A  0826               	movf	?___lwdiv,w
  2184  013B  00B0               	movwf	___lwmod@dividend
  2185  013C  2620               	fcall	___lwmod
  2186  013D  1283               	bcf	3,5	;RP0=0, select bank0
  2187  013E  1303               	bcf	3,6	;RP1=0, select bank0
  2188  013F  082E               	movf	?___lwmod,w
  2189  0140  3E30               	addlw	48
  2190  0141  00B8               	movwf	??_sprintf+1
  2191  0142  0838               	movf	??_sprintf+1,w
  2192  0143  00C2               	movwf	sprintf@c
  2193                           
  2194                           ;doprnt.c: 1523: }
  2195                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2196  0144  0842               	movf	sprintf@c,w
  2197  0145  00B7               	movwf	??_sprintf
  2198  0146  083F               	movf	sprintf@sp,w
  2199  0147  0084               	movwf	4
  2200  0148  0837               	movf	??_sprintf,w
  2201  0149  1383               	bcf	3,7	;select IRP bank0
  2202  014A  0080               	movwf	0
  2203  014B  3001               	movlw	1
  2204  014C  00B7               	movwf	??_sprintf
  2205  014D  0837               	movf	??_sprintf,w
  2206  014E  07BF               	addwf	sprintf@sp,f
  2207  014F  291D               	goto	l1720
  2208  0150                     l1724:	
  2209                           ;doprnt.c: 1525: }
  2210                           ;doprnt.c: 1533: }
  2211                           ;doprnt.c: 1535: alldone:
  2212                           
  2213                           
  2214                           ;doprnt.c: 1538: *sp = 0;
  2215  0150  1283               	bcf	3,5	;RP0=0, select bank0
  2216  0151  1303               	bcf	3,6	;RP1=0, select bank0
  2217  0152  083F               	movf	sprintf@sp,w
  2218  0153  0084               	movwf	4
  2219  0154  1383               	bcf	3,7	;select IRP bank0
  2220  0155  0180               	clrf	0
  2221  0156  0008               	return
  2222  0157                     __end_of_sprintf:	
  2223                           ;doprnt.c: 1540: return 0;
  2224                           ;	Return value of _sprintf is never used
  2225                           
  2226                           
  2227                           	psect	text6
  2228  0774                     __ptext6:	
  2229 ;; *************** function _isdigit *****************
  2230 ;; Defined at:
  2231 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  c               1    wreg     unsigned char 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  c               1    7[BANK0 ] unsigned char 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;		None               void
  2238 ;; Registers used:
  2239 ;;		wreg, status,2, status,0
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2245 ;;      Params:         0       0       0       0
  2246 ;;      Locals:         0       2       0       0
  2247 ;;      Temps:          0       0       0       0
  2248 ;;      Totals:         0       2       0       0
  2249 ;;Total ram usage:        2 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    3
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_sprintf
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           
  2260                           ;psect for function _isdigit
  2261  0774                     _isdigit:	
  2262                           
  2263                           ;incstack = 0
  2264                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2265                           ;isdigit@c stored from wreg
  2266  0774  1283               	bcf	3,5	;RP0=0, select bank0
  2267  0775  1303               	bcf	3,6	;RP1=0, select bank0
  2268  0776  00A7               	movwf	isdigit@c
  2269  0777  01A6               	clrf	_isdigit$702
  2270  0778  303A               	movlw	58
  2271  0779  0227               	subwf	isdigit@c,w
  2272  077A  1803               	skipnc
  2273  077B  2F82               	goto	l1530
  2274  077C  3030               	movlw	48
  2275  077D  0227               	subwf	isdigit@c,w
  2276  077E  1C03               	skipc
  2277  077F  2F82               	goto	l1530
  2278  0780  01A6               	clrf	_isdigit$702
  2279  0781  0AA6               	incf	_isdigit$702,f
  2280  0782                     l1530:	
  2281  0782  0C26               	rrf	_isdigit$702,w
  2282  0783  0008               	return
  2283  0784                     __end_of_isdigit:	
  2284                           
  2285                           	psect	text7
  2286  0620                     __ptext7:	
  2287 ;; *************** function ___lwmod *****************
  2288 ;; Defined at:
  2289 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;  divisor         2   14[BANK0 ] unsigned int 
  2292 ;;  dividend        2   16[BANK0 ] unsigned int 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  counter         1   19[BANK0 ] unsigned char 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  2   14[BANK0 ] unsigned int 
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2304 ;;      Params:         0       4       0       0
  2305 ;;      Locals:         0       1       0       0
  2306 ;;      Temps:          0       1       0       0
  2307 ;;      Totals:         0       6       0       0
  2308 ;;Total ram usage:        6 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    3
  2311 ;; This function calls:
  2312 ;;		Nothing
  2313 ;; This function is called by:
  2314 ;;		_sprintf
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           
  2319                           ;psect for function ___lwmod
  2320  0620                     ___lwmod:	
  2321                           
  2322                           ;incstack = 0
  2323                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2324  0620  1283               	bcf	3,5	;RP0=0, select bank0
  2325  0621  1303               	bcf	3,6	;RP1=0, select bank0
  2326  0622  082E               	movf	___lwmod@divisor,w
  2327  0623  042F               	iorwf	___lwmod@divisor+1,w
  2328  0624  1903               	btfsc	3,2
  2329  0625  2E4F               	goto	l1592
  2330  0626  01B3               	clrf	___lwmod@counter
  2331  0627  0AB3               	incf	___lwmod@counter,f
  2332  0628                     l1582:	
  2333  0628  1BAF               	btfsc	___lwmod@divisor+1,7
  2334  0629  2E36               	goto	l1584
  2335  062A  3001               	movlw	1
  2336  062B                     u1175:	
  2337  062B  1003               	clrc
  2338  062C  0DAE               	rlf	___lwmod@divisor,f
  2339  062D  0DAF               	rlf	___lwmod@divisor+1,f
  2340  062E  3EFF               	addlw	-1
  2341  062F  1D03               	skipz
  2342  0630  2E2B               	goto	u1175
  2343  0631  3001               	movlw	1
  2344  0632  00B2               	movwf	??___lwmod
  2345  0633  0832               	movf	??___lwmod,w
  2346  0634  07B3               	addwf	___lwmod@counter,f
  2347  0635  2E28               	goto	l1582
  2348  0636                     l1584:	
  2349  0636  082F               	movf	___lwmod@divisor+1,w
  2350  0637  0231               	subwf	___lwmod@dividend+1,w
  2351  0638  1D03               	skipz
  2352  0639  2E3C               	goto	u1195
  2353  063A  082E               	movf	___lwmod@divisor,w
  2354  063B  0230               	subwf	___lwmod@dividend,w
  2355  063C                     u1195:	
  2356  063C  1C03               	skipc
  2357  063D  2E44               	goto	l1588
  2358  063E  082E               	movf	___lwmod@divisor,w
  2359  063F  02B0               	subwf	___lwmod@dividend,f
  2360  0640  082F               	movf	___lwmod@divisor+1,w
  2361  0641  1C03               	skipc
  2362  0642  03B1               	decf	___lwmod@dividend+1,f
  2363  0643  02B1               	subwf	___lwmod@dividend+1,f
  2364  0644                     l1588:	
  2365  0644  3001               	movlw	1
  2366  0645                     u1205:	
  2367  0645  1003               	clrc
  2368  0646  0CAF               	rrf	___lwmod@divisor+1,f
  2369  0647  0CAE               	rrf	___lwmod@divisor,f
  2370  0648  3EFF               	addlw	-1
  2371  0649  1D03               	skipz
  2372  064A  2E45               	goto	u1205
  2373  064B  3001               	movlw	1
  2374  064C  02B3               	subwf	___lwmod@counter,f
  2375  064D  1D03               	btfss	3,2
  2376  064E  2E36               	goto	l1584
  2377  064F                     l1592:	
  2378  064F  0831               	movf	___lwmod@dividend+1,w
  2379  0650  00AF               	movwf	?___lwmod+1
  2380  0651  0830               	movf	___lwmod@dividend,w
  2381  0652  00AE               	movwf	?___lwmod
  2382  0653  0008               	return
  2383  0654                     __end_of___lwmod:	
  2384                           
  2385                           	psect	text8
  2386  0566                     __ptext8:	
  2387 ;; *************** function ___lwdiv *****************
  2388 ;; Defined at:
  2389 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  divisor         2    6[BANK0 ] unsigned int 
  2392 ;;  dividend        2    8[BANK0 ] unsigned int 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  quotient        2   11[BANK0 ] unsigned int 
  2395 ;;  counter         1   13[BANK0 ] unsigned char 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  2    6[BANK0 ] unsigned int 
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2405 ;;      Params:         0       4       0       0
  2406 ;;      Locals:         0       3       0       0
  2407 ;;      Temps:          0       1       0       0
  2408 ;;      Totals:         0       8       0       0
  2409 ;;Total ram usage:        8 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    3
  2412 ;; This function calls:
  2413 ;;		Nothing
  2414 ;; This function is called by:
  2415 ;;		_sprintf
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           
  2420                           ;psect for function ___lwdiv
  2421  0566                     ___lwdiv:	
  2422                           
  2423                           ;incstack = 0
  2424                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2425  0566  1283               	bcf	3,5	;RP0=0, select bank0
  2426  0567  1303               	bcf	3,6	;RP1=0, select bank0
  2427  0568  01AB               	clrf	___lwdiv@quotient
  2428  0569  01AC               	clrf	___lwdiv@quotient+1
  2429  056A  0826               	movf	___lwdiv@divisor,w
  2430  056B  0427               	iorwf	___lwdiv@divisor+1,w
  2431  056C  1903               	btfsc	3,2
  2432  056D  2D9F               	goto	l1570
  2433  056E  01AD               	clrf	___lwdiv@counter
  2434  056F  0AAD               	incf	___lwdiv@counter,f
  2435  0570                     l1558:	
  2436  0570  1BA7               	btfsc	___lwdiv@divisor+1,7
  2437  0571  2D7E               	goto	l1560
  2438  0572  3001               	movlw	1
  2439  0573                     u1105:	
  2440  0573  1003               	clrc
  2441  0574  0DA6               	rlf	___lwdiv@divisor,f
  2442  0575  0DA7               	rlf	___lwdiv@divisor+1,f
  2443  0576  3EFF               	addlw	-1
  2444  0577  1D03               	skipz
  2445  0578  2D73               	goto	u1105
  2446  0579  3001               	movlw	1
  2447  057A  00AA               	movwf	??___lwdiv
  2448  057B  082A               	movf	??___lwdiv,w
  2449  057C  07AD               	addwf	___lwdiv@counter,f
  2450  057D  2D70               	goto	l1558
  2451  057E                     l1560:	
  2452  057E  3001               	movlw	1
  2453  057F                     u1125:	
  2454  057F  1003               	clrc
  2455  0580  0DAB               	rlf	___lwdiv@quotient,f
  2456  0581  0DAC               	rlf	___lwdiv@quotient+1,f
  2457  0582  3EFF               	addlw	-1
  2458  0583  1D03               	skipz
  2459  0584  2D7F               	goto	u1125
  2460  0585  0827               	movf	___lwdiv@divisor+1,w
  2461  0586  0229               	subwf	___lwdiv@dividend+1,w
  2462  0587  1D03               	skipz
  2463  0588  2D8B               	goto	u1135
  2464  0589  0826               	movf	___lwdiv@divisor,w
  2465  058A  0228               	subwf	___lwdiv@dividend,w
  2466  058B                     u1135:	
  2467  058B  1C03               	skipc
  2468  058C  2D94               	goto	l1566
  2469  058D  0826               	movf	___lwdiv@divisor,w
  2470  058E  02A8               	subwf	___lwdiv@dividend,f
  2471  058F  0827               	movf	___lwdiv@divisor+1,w
  2472  0590  1C03               	skipc
  2473  0591  03A9               	decf	___lwdiv@dividend+1,f
  2474  0592  02A9               	subwf	___lwdiv@dividend+1,f
  2475  0593  142B               	bsf	___lwdiv@quotient,0
  2476  0594                     l1566:	
  2477  0594  3001               	movlw	1
  2478  0595                     u1145:	
  2479  0595  1003               	clrc
  2480  0596  0CA7               	rrf	___lwdiv@divisor+1,f
  2481  0597  0CA6               	rrf	___lwdiv@divisor,f
  2482  0598  3EFF               	addlw	-1
  2483  0599  1D03               	skipz
  2484  059A  2D95               	goto	u1145
  2485  059B  3001               	movlw	1
  2486  059C  02AD               	subwf	___lwdiv@counter,f
  2487  059D  1D03               	btfss	3,2
  2488  059E  2D7E               	goto	l1560
  2489  059F                     l1570:	
  2490  059F  082C               	movf	___lwdiv@quotient+1,w
  2491  05A0  00A7               	movwf	?___lwdiv+1
  2492  05A1  082B               	movf	___lwdiv@quotient,w
  2493  05A2  00A6               	movwf	?___lwdiv
  2494  05A3  0008               	return
  2495  05A4                     __end_of___lwdiv:	
  2496                           
  2497                           	psect	text9
  2498  0282                     __ptext9:	
  2499 ;; *************** function _Setup *****************
  2500 ;; Defined at:
  2501 ;;		line 93 in file "vip.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;		None
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;		None
  2506 ;; Return value:  Size  Location     Type
  2507 ;;		None               void
  2508 ;; Registers used:
  2509 ;;		wreg, status,2, status,0, pclath, cstack
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2515 ;;      Params:         0       0       0       0
  2516 ;;      Locals:         0       0       0       0
  2517 ;;      Temps:          0       2       0       0
  2518 ;;      Totals:         0       2       0       0
  2519 ;;Total ram usage:        2 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    5
  2522 ;; This function calls:
  2523 ;;		_Duty_Pwm
  2524 ;;		_Read_EEPROM
  2525 ;;		_Write_EEPROM
  2526 ;;		_exibe_status
  2527 ;;		_inicializa_lcd
  2528 ;; This function is called by:
  2529 ;;		_main
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           
  2534                           ;psect for function _Setup
  2535  0282                     _Setup:	
  2536                           
  2537                           ;vip.c: 95: CMCON = 0x07;
  2538                           
  2539                           ;incstack = 0
  2540                           ; Regs used in _Setup: [wreg+status,2+status,0+pclath+cstack]
  2541  0282  3007               	movlw	7
  2542  0283  1283               	bcf	3,5	;RP0=0, select bank0
  2543  0284  1303               	bcf	3,6	;RP1=0, select bank0
  2544  0285  009F               	movwf	31	;volatile
  2545                           
  2546                           ;vip.c: 96: TRISA = 0x38;
  2547  0286  3038               	movlw	56
  2548  0287  1683               	bsf	3,5	;RP0=1, select bank1
  2549  0288  1303               	bcf	3,6	;RP1=0, select bank1
  2550  0289  0085               	movwf	5	;volatile
  2551                           
  2552                           ;vip.c: 97: TRISB = 0x02;
  2553  028A  3002               	movlw	2
  2554  028B  0086               	movwf	6	;volatile
  2555                           
  2556                           ;vip.c: 98: PORTA = 0x38;
  2557  028C  3038               	movlw	56
  2558  028D  1283               	bcf	3,5	;RP0=0, select bank0
  2559  028E  1303               	bcf	3,6	;RP1=0, select bank0
  2560  028F  0085               	movwf	5	;volatile
  2561                           
  2562                           ;vip.c: 99: PORTB = 0x00;
  2563  0290  0186               	clrf	6	;volatile
  2564                           
  2565                           ;vip.c: 101: CCP1CONbits.CCP1M0 = 1;
  2566  0291  1417               	bsf	23,0	;volatile
  2567                           
  2568                           ;vip.c: 102: CCP1CONbits.CCP1M1 = 1;
  2569  0292  1497               	bsf	23,1	;volatile
  2570                           
  2571                           ;vip.c: 103: CCP1CONbits.CCP1M2 = 1;
  2572  0293  1517               	bsf	23,2	;volatile
  2573                           
  2574                           ;vip.c: 104: CCP1CONbits.CCP1M3 = 1;
  2575  0294  1597               	bsf	23,3	;volatile
  2576                           
  2577                           ;vip.c: 114: PR2 = 0x18;
  2578  0295  3018               	movlw	24
  2579  0296  1683               	bsf	3,5	;RP0=1, select bank1
  2580  0297  1303               	bcf	3,6	;RP1=0, select bank1
  2581  0298  0092               	movwf	18	;volatile
  2582                           
  2583                           ;vip.c: 119: CCPR1L = 0xAF;
  2584  0299  30AF               	movlw	175
  2585  029A  1283               	bcf	3,5	;RP0=0, select bank0
  2586  029B  1303               	bcf	3,6	;RP1=0, select bank0
  2587  029C  0095               	movwf	21	;volatile
  2588                           
  2589                           ;vip.c: 121: CCP1CONbits.CCP1Y = 0;
  2590  029D  1217               	bcf	23,4	;volatile
  2591                           
  2592                           ;vip.c: 122: CCP1CONbits.CCP1X = 0;
  2593  029E  1297               	bcf	23,5	;volatile
  2594                           
  2595                           ;vip.c: 125: T2CONbits.T2CKPS0 = 1;
  2596  029F  1412               	bsf	18,0	;volatile
  2597                           
  2598                           ;vip.c: 126: T2CONbits.T2CKPS1 = 0;
  2599  02A0  1092               	bcf	18,1	;volatile
  2600                           
  2601                           ;vip.c: 127: T2CONbits.TMR2ON = 1;
  2602  02A1  1512               	bsf	18,2	;volatile
  2603                           
  2604                           ;vip.c: 133: SPBRG = 25;
  2605  02A2  3019               	movlw	25
  2606  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  2607  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  2608  02A5  0099               	movwf	25	;volatile
  2609                           
  2610                           ;vip.c: 137: TXSTAbits.TX9 = 0;
  2611  02A6  1318               	bcf	24,6	;volatile
  2612                           
  2613                           ;vip.c: 138: TXSTAbits.TXEN = 0;
  2614  02A7  1298               	bcf	24,5	;volatile
  2615                           
  2616                           ;vip.c: 139: TXSTAbits.SYNC = 0;
  2617  02A8  1218               	bcf	24,4	;volatile
  2618                           
  2619                           ;vip.c: 140: TXSTAbits.BRGH = 1;
  2620  02A9  1518               	bsf	24,2	;volatile
  2621                           
  2622                           ;vip.c: 142: RCSTAbits.SPEN = 1;
  2623  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2624  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2625  02AC  1798               	bsf	24,7	;volatile
  2626                           
  2627                           ;vip.c: 143: RCSTAbits.RX9 = 0;
  2628  02AD  1318               	bcf	24,6	;volatile
  2629                           
  2630                           ;vip.c: 144: RCSTAbits.CREN = 1;
  2631  02AE  1618               	bsf	24,4	;volatile
  2632                           
  2633                           ;vip.c: 145: RCSTAbits.FERR = 0;
  2634  02AF  1118               	bcf	24,2	;volatile
  2635                           
  2636                           ;vip.c: 146: RCSTAbits.OERR = 0;
  2637  02B0  1098               	bcf	24,1	;volatile
  2638                           
  2639                           ;vip.c: 148: PIE1bits.RCIE = 1;
  2640  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  2641  02B2  1303               	bcf	3,6	;RP1=0, select bank1
  2642  02B3  168C               	bsf	12,5	;volatile
  2643                           
  2644                           ;vip.c: 149: PIR1bits.RCIF = 0;
  2645  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2646  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  2647  02B6  128C               	bcf	12,5	;volatile
  2648                           
  2649                           ;vip.c: 151: INTCONbits.GIE = 1;
  2650  02B7  178B               	bsf	11,7	;volatile
  2651                           
  2652                           ;vip.c: 152: INTCONbits.PEIE = 1;
  2653  02B8  170B               	bsf	11,6	;volatile
  2654                           
  2655                           ;vip.c: 153: RCSTAbits.SPEN = 0;
  2656  02B9  1398               	bcf	24,7	;volatile
  2657                           
  2658                           ;vip.c: 154: inicializa_lcd();
  2659  02BA  2741               	fcall	_inicializa_lcd
  2660                           
  2661                           ;vip.c: 155: RCSTAbits.SPEN = 1;
  2662  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2663  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  2664  02BD  1798               	bsf	24,7	;volatile
  2665                           
  2666                           ;vip.c: 161: if (Read_EEPROM(0x7F) == 0xFF) {
  2667  02BE  307F               	movlw	127
  2668  02BF  27A1               	fcall	_Read_EEPROM
  2669  02C0  3AFF               	xorlw	255
  2670  02C1  1D03               	skipz
  2671  02C2  2AE8               	goto	l1884
  2672                           
  2673                           ;vip.c: 162: Write_EEPROM(0x00, 0x78);
  2674  02C3  3078               	movlw	120
  2675  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  2676  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  2677  02C6  00B2               	movwf	??_Setup
  2678  02C7  0832               	movf	??_Setup,w
  2679  02C8  00A6               	movwf	Write_EEPROM@data
  2680  02C9  3000               	movlw	0
  2681  02CA  26AC               	fcall	_Write_EEPROM
  2682                           
  2683                           ;vip.c: 163: Write_EEPROM(0x01, 14);
  2684  02CB  300E               	movlw	14
  2685  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2686  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  2687  02CE  00B2               	movwf	??_Setup
  2688  02CF  0832               	movf	??_Setup,w
  2689  02D0  00A6               	movwf	Write_EEPROM@data
  2690  02D1  3001               	movlw	1
  2691  02D2  26AC               	fcall	_Write_EEPROM
  2692                           
  2693                           ;vip.c: 164: Write_EEPROM(0x02, 0x78);
  2694  02D3  3078               	movlw	120
  2695  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2696  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  2697  02D6  00B2               	movwf	??_Setup
  2698  02D7  0832               	movf	??_Setup,w
  2699  02D8  00A6               	movwf	Write_EEPROM@data
  2700  02D9  3002               	movlw	2
  2701  02DA  26AC               	fcall	_Write_EEPROM
  2702                           
  2703                           ;vip.c: 165: Write_EEPROM(0x03, 50);
  2704  02DB  3032               	movlw	50
  2705  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2706  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2707  02DE  00B2               	movwf	??_Setup
  2708  02DF  0832               	movf	??_Setup,w
  2709  02E0  00A6               	movwf	Write_EEPROM@data
  2710  02E1  3003               	movlw	3
  2711  02E2  26AC               	fcall	_Write_EEPROM
  2712                           
  2713                           ;vip.c: 166: Write_EEPROM(0x7F, 0);
  2714  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  2715  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  2716  02E5  01A6               	clrf	Write_EEPROM@data
  2717  02E6  307F               	movlw	127
  2718  02E7  26AC               	fcall	_Write_EEPROM
  2719  02E8                     l1884:	
  2720                           
  2721                           ;vip.c: 167: }
  2722                           ;vip.c: 170: PWM_main_motor = Read_EEPROM(0x00);
  2723  02E8  3000               	movlw	0
  2724  02E9  27A1               	fcall	_Read_EEPROM
  2725  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2726  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  2727  02EC  00B2               	movwf	??_Setup
  2728  02ED  01B3               	clrf	??_Setup+1
  2729  02EE  0832               	movf	??_Setup,w
  2730  02EF  00C8               	movwf	_PWM_main_motor
  2731  02F0  0833               	movf	??_Setup+1,w
  2732  02F1  00C9               	movwf	_PWM_main_motor+1
  2733                           
  2734                           ;vip.c: 171: Time_main_motor = Read_EEPROM(0x01);
  2735  02F2  3001               	movlw	1
  2736  02F3  27A1               	fcall	_Read_EEPROM
  2737  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  2738  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  2739  02F6  00B2               	movwf	??_Setup
  2740  02F7  01B3               	clrf	??_Setup+1
  2741  02F8  0832               	movf	??_Setup,w
  2742  02F9  00CC               	movwf	_Time_main_motor
  2743  02FA  0833               	movf	??_Setup+1,w
  2744  02FB  00CD               	movwf	_Time_main_motor+1
  2745                           
  2746                           ;vip.c: 172: PWM_motors = Read_EEPROM(0x02);
  2747  02FC  3002               	movlw	2
  2748  02FD  27A1               	fcall	_Read_EEPROM
  2749  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  2750  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  2751  0300  00B2               	movwf	??_Setup
  2752  0301  01B3               	clrf	??_Setup+1
  2753  0302  0832               	movf	??_Setup,w
  2754  0303  00CA               	movwf	_PWM_motors
  2755  0304  0833               	movf	??_Setup+1,w
  2756  0305  00CB               	movwf	_PWM_motors+1
  2757                           
  2758                           ;vip.c: 173: Time_motors = Read_EEPROM(0x03);
  2759  0306  3003               	movlw	3
  2760  0307  27A1               	fcall	_Read_EEPROM
  2761  0308  1283               	bcf	3,5	;RP0=0, select bank0
  2762  0309  1303               	bcf	3,6	;RP1=0, select bank0
  2763  030A  00B2               	movwf	??_Setup
  2764  030B  01B3               	clrf	??_Setup+1
  2765  030C  0832               	movf	??_Setup,w
  2766  030D  00CE               	movwf	_Time_motors
  2767  030E  0833               	movf	??_Setup+1,w
  2768  030F  00CF               	movwf	_Time_motors+1
  2769                           
  2770                           ;vip.c: 176: INTCONbits.T0IE = 1;
  2771  0310  168B               	bsf	11,5	;volatile
  2772                           
  2773                           ;vip.c: 177: INTCONbits.T0IF = 0;
  2774  0311  110B               	bcf	11,2	;volatile
  2775                           
  2776                           ;vip.c: 178: OPTION_REGbits.T0CS = 0;
  2777  0312  1683               	bsf	3,5	;RP0=1, select bank1
  2778  0313  1303               	bcf	3,6	;RP1=0, select bank1
  2779  0314  1281               	bcf	1,5	;volatile
  2780                           
  2781                           ;vip.c: 179: OPTION_REGbits.PSA = 0;
  2782  0315  1181               	bcf	1,3	;volatile
  2783                           
  2784                           ;vip.c: 181: OPTION_REGbits.PS0 = 1;
  2785  0316  1401               	bsf	1,0	;volatile
  2786                           
  2787                           ;vip.c: 182: OPTION_REGbits.PS1 = 1;
  2788  0317  1481               	bsf	1,1	;volatile
  2789                           
  2790                           ;vip.c: 183: OPTION_REGbits.PS2 = 1;
  2791  0318  1501               	bsf	1,2	;volatile
  2792                           
  2793                           ;vip.c: 185: Duty_Pwm(50);
  2794  0319  3032               	movlw	50
  2795  031A  1283               	bcf	3,5	;RP0=0, select bank0
  2796  031B  1303               	bcf	3,6	;RP1=0, select bank0
  2797  031C  00AC               	movwf	Duty_Pwm@value
  2798  031D  3000               	movlw	0
  2799  031E  00AD               	movwf	Duty_Pwm@value+1
  2800  031F  2654               	fcall	_Duty_Pwm
  2801                           
  2802                           ;vip.c: 192: TMR0 = 0x15;
  2803  0320  3015               	movlw	21
  2804  0321  1283               	bcf	3,5	;RP0=0, select bank0
  2805  0322  1303               	bcf	3,6	;RP1=0, select bank0
  2806  0323  0081               	movwf	1	;volatile
  2807                           
  2808                           ;vip.c: 193: config = 0;
  2809  0324  01D6               	clrf	_config
  2810  0325  01D7               	clrf	_config+1
  2811                           
  2812                           ;vip.c: 194: display_config = 0;
  2813  0326  11FC               	bcf	_display_config/(0+8),_display_config& (0+7)
  2814                           
  2815                           ;vip.c: 195: display_value = 0;
  2816  0327  127C               	bcf	_display_value/(0+8),_display_value& (0+7)
  2817                           
  2818                           ;vip.c: 196: flag_serial = 0;
  2819  0328  12FC               	bcf	_flag_serial/(0+8),_flag_serial& (0+7)
  2820                           
  2821                           ;vip.c: 197: reg = 0x00;
  2822  0329  01D8               	clrf	_reg
  2823                           
  2824                           ;vip.c: 198: aux_tm0 = 0;
  2825  032A  01D2               	clrf	_aux_tm0
  2826  032B  01D3               	clrf	_aux_tm0+1
  2827                           
  2828                           ;vip.c: 199: Flag_active = 0;
  2829  032C  107C               	bcf	_Flag_active/(0+8),_Flag_active& (0+7)
  2830                           
  2831                           ;vip.c: 200: Flag_conectado = 0;
  2832  032D  10FC               	bcf	_Flag_conectado/(0+8),_Flag_conectado& (0+7)
  2833                           
  2834                           ;vip.c: 201: cnt_int_tmr0 = 0;
  2835  032E  01D4               	clrf	_cnt_int_tmr0
  2836  032F  01D5               	clrf	_cnt_int_tmr0+1
  2837                           
  2838                           ;vip.c: 202: Tmp_atividade = 0;
  2839  0330  01D0               	clrf	_Tmp_atividade
  2840  0331  01D1               	clrf	_Tmp_atividade+1
  2841                           
  2842                           ;vip.c: 203: Flag_motors_off = 0;
  2843  0332  117C               	bcf	_Flag_motors_off/(0+8),_Flag_motors_off& (0+7)
  2844                           
  2845                           ;vip.c: 204: Active_motor = 1;
  2846  0333  3001               	movlw	1
  2847  0334  00C6               	movwf	_Active_motor
  2848  0335  3000               	movlw	0
  2849  0336  00C7               	movwf	_Active_motor+1
  2850                           
  2851                           ;vip.c: 206: exibe_status();
  2852  0337  26D5               	fcall	_exibe_status
  2853  0338  0008               	return
  2854  0339                     __end_of_Setup:	
  2855                           
  2856                           	psect	text10
  2857  0741                     __ptext10:	
  2858 ;; *************** function _inicializa_lcd *****************
  2859 ;; Defined at:
  2860 ;;		line 561 in file "vip.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;		None
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;		None
  2865 ;; Return value:  Size  Location     Type
  2866 ;;		None               void
  2867 ;; Registers used:
  2868 ;;		wreg, status,2, status,0, pclath, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2874 ;;      Params:         0       0       0       0
  2875 ;;      Locals:         0       0       0       0
  2876 ;;      Temps:          0       2       0       0
  2877 ;;      Totals:         0       2       0       0
  2878 ;;Total ram usage:        2 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    4
  2881 ;; This function calls:
  2882 ;;		_lcd_comando
  2883 ;; This function is called by:
  2884 ;;		_Setup
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           
  2889                           ;psect for function _inicializa_lcd
  2890  0741                     _inicializa_lcd:	
  2891                           
  2892                           ;vip.c: 562: PORTB = 0X00;
  2893                           
  2894                           ;incstack = 0
  2895                           ; Regs used in _inicializa_lcd: [wreg+status,2+status,0+pclath+cstack]
  2896  0741  1283               	bcf	3,5	;RP0=0, select bank0
  2897  0742  1303               	bcf	3,6	;RP1=0, select bank0
  2898  0743  0186               	clrf	6	;volatile
  2899                           
  2900                           ;vip.c: 563: PORTBbits.RB2 = 0;
  2901  0744  1106               	bcf	6,2	;volatile
  2902                           
  2903                           ;vip.c: 564: PORTBbits.RB0 = 0;
  2904  0745  1006               	bcf	6,0	;volatile
  2905                           
  2906                           ;vip.c: 565: _delay((unsigned long)((15)*(4000000/4000.0)));
  2907  0746  3014               	movlw	20
  2908  0747  00AA               	movwf	??_inicializa_lcd+1
  2909  0748  3079               	movlw	121
  2910  0749  00A9               	movwf	??_inicializa_lcd
  2911  074A                     u2067:	
  2912  074A  0BA9               	decfsz	??_inicializa_lcd,f
  2913  074B  2F4A               	goto	u2067
  2914  074C  0BAA               	decfsz	??_inicializa_lcd+1,f
  2915  074D  2F4A               	goto	u2067
  2916  074E  2F4F               	nop2
  2917                           
  2918                           ;vip.c: 566: lcd_comando(0x03);
  2919  074F  3003               	movlw	3
  2920  0750  25E2               	fcall	_lcd_comando
  2921                           
  2922                           ;vip.c: 567: lcd_comando(0x03);
  2923  0751  3003               	movlw	3
  2924  0752  25E2               	fcall	_lcd_comando
  2925                           
  2926                           ;vip.c: 568: lcd_comando(0x03);
  2927  0753  3003               	movlw	3
  2928  0754  25E2               	fcall	_lcd_comando
  2929                           
  2930                           ;vip.c: 569: lcd_comando(0x02);
  2931  0755  3002               	movlw	2
  2932  0756  25E2               	fcall	_lcd_comando
  2933                           
  2934                           ;vip.c: 570: lcd_comando(0x28);
  2935  0757  3028               	movlw	40
  2936  0758  25E2               	fcall	_lcd_comando
  2937                           
  2938                           ;vip.c: 571: lcd_comando(0x0C);
  2939  0759  300C               	movlw	12
  2940  075A  25E2               	fcall	_lcd_comando
  2941                           
  2942                           ;vip.c: 572: lcd_comando(0x01);
  2943  075B  3001               	movlw	1
  2944  075C  25E2               	fcall	_lcd_comando
  2945                           
  2946                           ;vip.c: 573: lcd_comando(0x06);
  2947  075D  3006               	movlw	6
  2948  075E  25E2               	fcall	_lcd_comando
  2949  075F  0008               	return
  2950  0760                     __end_of_inicializa_lcd:	
  2951                           
  2952                           	psect	text11
  2953  06D5                     __ptext11:	
  2954 ;; *************** function _exibe_status *****************
  2955 ;; Defined at:
  2956 ;;		line 495 in file "vip.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;		None
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;		None               void
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0, pclath, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2970 ;;      Params:         0       0       0       0
  2971 ;;      Locals:         0       0       0       0
  2972 ;;      Temps:          0       0       0       0
  2973 ;;      Totals:         0       0       0       0
  2974 ;;Total ram usage:        0 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    4
  2977 ;; This function calls:
  2978 ;;		_lcd_comando
  2979 ;;		_lcd_escrevedado
  2980 ;; This function is called by:
  2981 ;;		_Setup
  2982 ;;		_exibe_configuracao
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           
  2987                           ;psect for function _exibe_status
  2988  06D5                     _exibe_status:	
  2989                           
  2990                           ;vip.c: 496: RCSTAbits.SPEN = 0;
  2991                           
  2992                           ;incstack = 0
  2993                           ; Regs used in _exibe_status: [wreg+status,2+status,0+pclath+cstack]
  2994  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  2995  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  2996  06D7  1398               	bcf	24,7	;volatile
  2997                           
  2998                           ;vip.c: 497: lcd_comando(0x01);
  2999  06D8  3001               	movlw	1
  3000  06D9  25E2               	fcall	_lcd_comando
  3001                           
  3002                           ;vip.c: 498: lcd_comando(0x80);
  3003  06DA  3080               	movlw	128
  3004  06DB  25E2               	fcall	_lcd_comando
  3005                           
  3006                           ;vip.c: 499: if (Flag_conectado) {
  3007  06DC  1CFC               	btfss	_Flag_conectado/(0+8),_Flag_conectado& (0+7)
  3008  06DD  2EE2               	goto	l1798
  3009                           
  3010                           ;vip.c: 500: lcd_escrevedado('O');
  3011  06DE  304F               	movlw	79
  3012  06DF  25A4               	fcall	_lcd_escrevedado
  3013                           
  3014                           ;vip.c: 501: lcd_escrevedado('K');
  3015  06E0  304B               	movlw	75
  3016  06E1  2EF7               	goto	L7
  3017  06E2                     l1798:	
  3018                           ;vip.c: 502: } else {
  3019                           
  3020                           
  3021                           ;vip.c: 503: lcd_escrevedado('A');
  3022  06E2  3041               	movlw	65
  3023  06E3  25A4               	fcall	_lcd_escrevedado
  3024                           
  3025                           ;vip.c: 504: lcd_escrevedado('g');
  3026  06E4  3067               	movlw	103
  3027  06E5  25A4               	fcall	_lcd_escrevedado
  3028                           
  3029                           ;vip.c: 505: lcd_escrevedado('u');
  3030  06E6  3075               	movlw	117
  3031  06E7  25A4               	fcall	_lcd_escrevedado
  3032                           
  3033                           ;vip.c: 506: lcd_escrevedado('a');
  3034  06E8  3061               	movlw	97
  3035  06E9  25A4               	fcall	_lcd_escrevedado
  3036                           
  3037                           ;vip.c: 507: lcd_escrevedado('r');
  3038  06EA  3072               	movlw	114
  3039  06EB  25A4               	fcall	_lcd_escrevedado
  3040                           
  3041                           ;vip.c: 508: lcd_escrevedado('d');
  3042  06EC  3064               	movlw	100
  3043  06ED  25A4               	fcall	_lcd_escrevedado
  3044                           
  3045                           ;vip.c: 509: lcd_escrevedado('.');
  3046  06EE  302E               	movlw	46
  3047  06EF  25A4               	fcall	_lcd_escrevedado
  3048                           
  3049                           ;vip.c: 510: lcd_escrevedado(' ');
  3050  06F0  3020               	movlw	32
  3051  06F1  25A4               	fcall	_lcd_escrevedado
  3052                           
  3053                           ;vip.c: 511: lcd_escrevedado('C');
  3054  06F2  3043               	movlw	67
  3055  06F3  25A4               	fcall	_lcd_escrevedado
  3056                           
  3057                           ;vip.c: 512: lcd_escrevedado('o');
  3058  06F4  306F               	movlw	111
  3059  06F5  25A4               	fcall	_lcd_escrevedado
  3060                           
  3061                           ;vip.c: 513: lcd_escrevedado('n');
  3062  06F6  306E               	movlw	110
  3063  06F7                     L7:	
  3064  06F7  25A4               	fcall	_lcd_escrevedado
  3065                           
  3066                           ;vip.c: 514: }
  3067                           ;vip.c: 515: RCSTAbits.SPEN = 1;
  3068  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  3069  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  3070  06FA  1798               	bsf	24,7	;volatile
  3071                           
  3072                           ;vip.c: 516: display_value = 0;
  3073  06FB  127C               	bcf	_display_value/(0+8),_display_value& (0+7)
  3074  06FC  0008               	return
  3075  06FD                     __end_of_exibe_status:	
  3076                           
  3077                           	psect	text12
  3078  05A4                     __ptext12:	
  3079 ;; *************** function _lcd_escrevedado *****************
  3080 ;; Defined at:
  3081 ;;		line 593 in file "vip.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  dado            1    wreg     unsigned char 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  dado            1    8[BANK0 ] unsigned char 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;		None               void
  3088 ;; Registers used:
  3089 ;;		wreg, status,2, status,0
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3095 ;;      Params:         0       0       0       0
  3096 ;;      Locals:         0       1       0       0
  3097 ;;      Temps:          0       2       0       0
  3098 ;;      Totals:         0       3       0       0
  3099 ;;Total ram usage:        3 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    3
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_exibe_configuracao
  3106 ;;		_exibe_status
  3107 ;;		_exibe_config_valor
  3108 ;;		_exibe_recebimento
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           
  3113                           ;psect for function _lcd_escrevedado
  3114  05A4                     _lcd_escrevedado:	
  3115                           
  3116                           ;incstack = 0
  3117                           ; Regs used in _lcd_escrevedado: [wreg+status,2+status,0]
  3118                           ;lcd_escrevedado@dado stored from wreg
  3119  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  3120  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  3121  05A6  00A8               	movwf	lcd_escrevedado@dado
  3122                           
  3123                           ;vip.c: 594: PORTBbits.RB2 = 1;
  3124  05A7  1506               	bsf	6,2	;volatile
  3125                           
  3126                           ;vip.c: 595: _delay((unsigned long)((100)*(4000000/4000000.0)));
  3127  05A8  3021               	movlw	33
  3128  05A9  00A6               	movwf	??_lcd_escrevedado
  3129  05AA                     u2077:	
  3130  05AA  0BA6               	decfsz	??_lcd_escrevedado,f
  3131  05AB  2DAA               	goto	u2077
  3132                           
  3133                           ;vip.c: 596: PORTBbits.RB0 = 0;
  3134  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  3135  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  3136  05AE  1006               	bcf	6,0	;volatile
  3137                           
  3138                           ;vip.c: 598: PORTB = ((dado & 0xF0) | (PORTB & 0x0F));
  3139  05AF  300F               	movlw	15
  3140  05B0  0506               	andwf	6,w	;volatile
  3141  05B1  00A6               	movwf	??_lcd_escrevedado
  3142  05B2  0828               	movf	lcd_escrevedado@dado,w
  3143  05B3  39F0               	andlw	240
  3144  05B4  0426               	iorwf	??_lcd_escrevedado,w
  3145  05B5  0086               	movwf	6	;volatile
  3146                           
  3147                           ;vip.c: 599: PORTBbits.RB0 = 1;
  3148  05B6  1406               	bsf	6,0	;volatile
  3149                           
  3150                           ;vip.c: 600: _delay((unsigned long)((5)*(4000000/4000.0)));
  3151  05B7  3007               	movlw	7
  3152  05B8  00A7               	movwf	??_lcd_escrevedado+1
  3153  05B9  307D               	movlw	125
  3154  05BA  00A6               	movwf	??_lcd_escrevedado
  3155  05BB                     u2087:	
  3156  05BB  0BA6               	decfsz	??_lcd_escrevedado,f
  3157  05BC  2DBB               	goto	u2087
  3158  05BD  0BA7               	decfsz	??_lcd_escrevedado+1,f
  3159  05BE  2DBB               	goto	u2087
  3160                           
  3161                           ;vip.c: 601: PORTBbits.RB0 = 0;
  3162  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  3163  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  3164  05C1  1006               	bcf	6,0	;volatile
  3165                           
  3166                           ;vip.c: 603: PORTB = ((dado << 4) | (PORTB & 0x0F));
  3167  05C2  300F               	movlw	15
  3168  05C3  0506               	andwf	6,w	;volatile
  3169  05C4  00A6               	movwf	??_lcd_escrevedado
  3170  05C5  0828               	movf	lcd_escrevedado@dado,w
  3171  05C6  00A7               	movwf	??_lcd_escrevedado+1
  3172  05C7  3003               	movlw	3
  3173  05C8                     u1235:	
  3174  05C8  1003               	clrc
  3175  05C9  0DA7               	rlf	??_lcd_escrevedado+1,f
  3176  05CA  3EFF               	addlw	-1
  3177  05CB  1D03               	skipz
  3178  05CC  2DC8               	goto	u1235
  3179  05CD  1003               	clrc
  3180  05CE  0D27               	rlf	??_lcd_escrevedado+1,w
  3181  05CF  0426               	iorwf	??_lcd_escrevedado,w
  3182  05D0  0086               	movwf	6	;volatile
  3183                           
  3184                           ;vip.c: 604: PORTBbits.RB0 = 1;
  3185  05D1  1406               	bsf	6,0	;volatile
  3186                           
  3187                           ;vip.c: 605: _delay((unsigned long)((5)*(4000000/4000.0)));
  3188  05D2  3007               	movlw	7
  3189  05D3  00A7               	movwf	??_lcd_escrevedado+1
  3190  05D4  307D               	movlw	125
  3191  05D5  00A6               	movwf	??_lcd_escrevedado
  3192  05D6                     u2097:	
  3193  05D6  0BA6               	decfsz	??_lcd_escrevedado,f
  3194  05D7  2DD6               	goto	u2097
  3195  05D8  0BA7               	decfsz	??_lcd_escrevedado+1,f
  3196  05D9  2DD6               	goto	u2097
  3197                           
  3198                           ;vip.c: 606: PORTBbits.RB0 = 0;
  3199  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  3200  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  3201  05DC  1006               	bcf	6,0	;volatile
  3202                           
  3203                           ;vip.c: 607: _delay((unsigned long)((40)*(4000000/4000000.0)));
  3204  05DD  300D               	movlw	13
  3205  05DE  00A6               	movwf	??_lcd_escrevedado
  3206  05DF                     u2107:	
  3207  05DF  0BA6               	decfsz	??_lcd_escrevedado,f
  3208  05E0  2DDF               	goto	u2107
  3209  05E1  0008               	return
  3210  05E2                     __end_of_lcd_escrevedado:	
  3211                           
  3212                           	psect	text13
  3213  05E2                     __ptext13:	
  3214 ;; *************** function _lcd_comando *****************
  3215 ;; Defined at:
  3216 ;;		line 576 in file "vip.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;  dado            1    wreg     unsigned char 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  dado            1    8[BANK0 ] unsigned char 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;		None               void
  3223 ;; Registers used:
  3224 ;;		wreg, status,2, status,0
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3230 ;;      Params:         0       0       0       0
  3231 ;;      Locals:         0       1       0       0
  3232 ;;      Temps:          0       2       0       0
  3233 ;;      Totals:         0       3       0       0
  3234 ;;Total ram usage:        3 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    3
  3237 ;; This function calls:
  3238 ;;		Nothing
  3239 ;; This function is called by:
  3240 ;;		_exibe_configuracao
  3241 ;;		_exibe_status
  3242 ;;		_exibe_config_valor
  3243 ;;		_inicializa_lcd
  3244 ;;		_exibe_recebimento
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           
  3249                           ;psect for function _lcd_comando
  3250  05E2                     _lcd_comando:	
  3251                           
  3252                           ;incstack = 0
  3253                           ; Regs used in _lcd_comando: [wreg+status,2+status,0]
  3254                           ;lcd_comando@dado stored from wreg
  3255  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  3256  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  3257  05E4  00A8               	movwf	lcd_comando@dado
  3258                           
  3259                           ;vip.c: 577: PORTBbits.RB2 = 0;
  3260  05E5  1106               	bcf	6,2	;volatile
  3261                           
  3262                           ;vip.c: 578: _delay((unsigned long)((100)*(4000000/4000000.0)));
  3263  05E6  3021               	movlw	33
  3264  05E7  00A6               	movwf	??_lcd_comando
  3265  05E8                     u2117:	
  3266  05E8  0BA6               	decfsz	??_lcd_comando,f
  3267  05E9  2DE8               	goto	u2117
  3268                           
  3269                           ;vip.c: 579: PORTBbits.RB0 = 0;
  3270  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  3271  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  3272  05EC  1006               	bcf	6,0	;volatile
  3273                           
  3274                           ;vip.c: 581: PORTB = ((dado & 0xF0) | (PORTB & 0x0F));
  3275  05ED  300F               	movlw	15
  3276  05EE  0506               	andwf	6,w	;volatile
  3277  05EF  00A6               	movwf	??_lcd_comando
  3278  05F0  0828               	movf	lcd_comando@dado,w
  3279  05F1  39F0               	andlw	240
  3280  05F2  0426               	iorwf	??_lcd_comando,w
  3281  05F3  0086               	movwf	6	;volatile
  3282                           
  3283                           ;vip.c: 582: PORTBbits.RB0 = 1;
  3284  05F4  1406               	bsf	6,0	;volatile
  3285                           
  3286                           ;vip.c: 583: _delay((unsigned long)((5)*(4000000/4000.0)));
  3287  05F5  3007               	movlw	7
  3288  05F6  00A7               	movwf	??_lcd_comando+1
  3289  05F7  307D               	movlw	125
  3290  05F8  00A6               	movwf	??_lcd_comando
  3291  05F9                     u2127:	
  3292  05F9  0BA6               	decfsz	??_lcd_comando,f
  3293  05FA  2DF9               	goto	u2127
  3294  05FB  0BA7               	decfsz	??_lcd_comando+1,f
  3295  05FC  2DF9               	goto	u2127
  3296                           
  3297                           ;vip.c: 584: PORTBbits.RB0 = 0;
  3298  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  3299  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  3300  05FF  1006               	bcf	6,0	;volatile
  3301                           
  3302                           ;vip.c: 586: PORTB = ((dado << 4) | (PORTB & 0x0F));
  3303  0600  300F               	movlw	15
  3304  0601  0506               	andwf	6,w	;volatile
  3305  0602  00A6               	movwf	??_lcd_comando
  3306  0603  0828               	movf	lcd_comando@dado,w
  3307  0604  00A7               	movwf	??_lcd_comando+1
  3308  0605  3003               	movlw	3
  3309  0606                     u1225:	
  3310  0606  1003               	clrc
  3311  0607  0DA7               	rlf	??_lcd_comando+1,f
  3312  0608  3EFF               	addlw	-1
  3313  0609  1D03               	skipz
  3314  060A  2E06               	goto	u1225
  3315  060B  1003               	clrc
  3316  060C  0D27               	rlf	??_lcd_comando+1,w
  3317  060D  0426               	iorwf	??_lcd_comando,w
  3318  060E  0086               	movwf	6	;volatile
  3319                           
  3320                           ;vip.c: 587: PORTBbits.RB0 = 1;
  3321  060F  1406               	bsf	6,0	;volatile
  3322                           
  3323                           ;vip.c: 588: _delay((unsigned long)((5)*(4000000/4000.0)));
  3324  0610  3007               	movlw	7
  3325  0611  00A7               	movwf	??_lcd_comando+1
  3326  0612  307D               	movlw	125
  3327  0613  00A6               	movwf	??_lcd_comando
  3328  0614                     u2137:	
  3329  0614  0BA6               	decfsz	??_lcd_comando,f
  3330  0615  2E14               	goto	u2137
  3331  0616  0BA7               	decfsz	??_lcd_comando+1,f
  3332  0617  2E14               	goto	u2137
  3333                           
  3334                           ;vip.c: 589: PORTBbits.RB0 = 0;
  3335  0618  1283               	bcf	3,5	;RP0=0, select bank0
  3336  0619  1303               	bcf	3,6	;RP1=0, select bank0
  3337  061A  1006               	bcf	6,0	;volatile
  3338                           
  3339                           ;vip.c: 590: _delay((unsigned long)((40)*(4000000/4000000.0)));
  3340  061B  300D               	movlw	13
  3341  061C  00A6               	movwf	??_lcd_comando
  3342  061D                     u2147:	
  3343  061D  0BA6               	decfsz	??_lcd_comando,f
  3344  061E  2E1D               	goto	u2147
  3345  061F  0008               	return
  3346  0620                     __end_of_lcd_comando:	
  3347                           
  3348                           	psect	text14
  3349  06AC                     __ptext14:	
  3350 ;; *************** function _Write_EEPROM *****************
  3351 ;; Defined at:
  3352 ;;		line 665 in file "vip.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  addr            1    wreg     unsigned char 
  3355 ;;  data            1    6[BANK0 ] unsigned char 
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  addr            1   11[BANK0 ] unsigned char 
  3358 ;;  aux_Global_i    2    9[BANK0 ] int 
  3359 ;; Return value:  Size  Location     Type
  3360 ;;		None               void
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, status,0
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3368 ;;      Params:         0       1       0       0
  3369 ;;      Locals:         0       3       0       0
  3370 ;;      Temps:          0       2       0       0
  3371 ;;      Totals:         0       6       0       0
  3372 ;;Total ram usage:        6 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:    3
  3375 ;; This function calls:
  3376 ;;		Nothing
  3377 ;; This function is called by:
  3378 ;;		_Setup
  3379 ;;		_exibe_configuracao
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           
  3384                           ;psect for function _Write_EEPROM
  3385  06AC                     _Write_EEPROM:	
  3386                           
  3387                           ;incstack = 0
  3388                           ; Regs used in _Write_EEPROM: [wreg+status,2+status,0]
  3389                           ;Write_EEPROM@addr stored from wreg
  3390  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  3391  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  3392  06AE  00AB               	movwf	Write_EEPROM@addr
  3393                           
  3394                           ;vip.c: 666: int aux_Global_interrupt;
  3395                           ;vip.c: 668: aux_Global_interrupt = INTCONbits.GIE;
  3396  06AF  0D0B               	rlf	11,w	;volatile
  3397  06B0  0D0B               	rlf	11,w	;volatile
  3398  06B1  3901               	andlw	1
  3399  06B2  00A7               	movwf	??_Write_EEPROM
  3400  06B3  01A8               	clrf	??_Write_EEPROM+1
  3401  06B4  0827               	movf	??_Write_EEPROM,w
  3402  06B5  00A9               	movwf	Write_EEPROM@aux_Global_interrupt
  3403  06B6  0828               	movf	??_Write_EEPROM+1,w
  3404  06B7  00AA               	movwf	Write_EEPROM@aux_Global_interrupt+1
  3405                           
  3406                           ;vip.c: 669: EEADR = addr;
  3407  06B8  082B               	movf	Write_EEPROM@addr,w
  3408  06B9  1683               	bsf	3,5	;RP0=1, select bank1
  3409  06BA  1303               	bcf	3,6	;RP1=0, select bank1
  3410  06BB  009B               	movwf	27	;volatile
  3411                           
  3412                           ;vip.c: 670: EEDATA = data;
  3413  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  3414  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  3415  06BE  0826               	movf	Write_EEPROM@data,w
  3416  06BF  1683               	bsf	3,5	;RP0=1, select bank1
  3417  06C0  1303               	bcf	3,6	;RP1=0, select bank1
  3418  06C1  009A               	movwf	26	;volatile
  3419                           
  3420                           ;vip.c: 672: if (INTCONbits.GIE) {
  3421  06C2  1B8B               	btfsc	11,7	;volatile
  3422                           
  3423                           ;vip.c: 673: INTCONbits.GIE = 0;
  3424  06C3  138B               	bcf	11,7	;volatile
  3425                           
  3426                           ;vip.c: 674: }
  3427                           ;vip.c: 675: EECON1bits.WREN = 1;
  3428  06C4  151C               	bsf	28,2	;volsfr
  3429                           
  3430                           ;vip.c: 676: EECON2 = 0x55;
  3431  06C5  3055               	movlw	85
  3432  06C6  009D               	movwf	29	;volsfr
  3433                           
  3434                           ;vip.c: 677: EECON2 = 0xAA;
  3435  06C7  30AA               	movlw	170
  3436  06C8  009D               	movwf	29	;volsfr
  3437                           
  3438                           ;vip.c: 678: ;
  3439                           ;vip.c: 679: EECON1bits.WR = 1;
  3440  06C9  149C               	bsf	28,1	;volsfr
  3441  06CA                     l237:	
  3442                           ;vip.c: 680: while (EECON1bits.WR);
  3443                           
  3444  06CA  189C               	btfsc	28,1	;volsfr
  3445  06CB  2ECA               	goto	l237
  3446                           
  3447                           ;vip.c: 681: EECON1bits.WREN = 0;
  3448  06CC  111C               	bcf	28,2	;volsfr
  3449                           
  3450                           ;vip.c: 682: if (aux_Global_interrupt) INTCONbits.GIE = 1;
  3451  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  3452  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  3453  06CF  0829               	movf	Write_EEPROM@aux_Global_interrupt,w
  3454  06D0  042A               	iorwf	Write_EEPROM@aux_Global_interrupt+1,w
  3455  06D1  1903               	btfsc	3,2
  3456  06D2  0008               	return
  3457  06D3  178B               	bsf	11,7	;volatile
  3458  06D4  0008               	return
  3459  06D5                     __end_of_Write_EEPROM:	
  3460                           
  3461                           	psect	text15
  3462  07A1                     __ptext15:	
  3463 ;; *************** function _Read_EEPROM *****************
  3464 ;; Defined at:
  3465 ;;		line 685 in file "vip.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  addr            1    wreg     unsigned char 
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;  addr            1    6[BANK0 ] unsigned char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      unsigned char 
  3472 ;; Registers used:
  3473 ;;		wreg
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3479 ;;      Params:         0       0       0       0
  3480 ;;      Locals:         0       1       0       0
  3481 ;;      Temps:          0       0       0       0
  3482 ;;      Totals:         0       1       0       0
  3483 ;;Total ram usage:        1 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    3
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_Setup
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _Read_EEPROM
  3495  07A1                     _Read_EEPROM:	
  3496                           
  3497                           ;incstack = 0
  3498                           ; Regs used in _Read_EEPROM: [wreg]
  3499                           ;Read_EEPROM@addr stored from wreg
  3500  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  3501  07A2  1303               	bcf	3,6	;RP1=0, select bank0
  3502  07A3  00A6               	movwf	Read_EEPROM@addr
  3503                           
  3504                           ;vip.c: 686: EEADR = addr;
  3505  07A4  0826               	movf	Read_EEPROM@addr,w
  3506  07A5  1683               	bsf	3,5	;RP0=1, select bank1
  3507  07A6  1303               	bcf	3,6	;RP1=0, select bank1
  3508  07A7  009B               	movwf	27	;volatile
  3509                           
  3510                           ;vip.c: 687: EECON1bits.RD = 1;
  3511  07A8  141C               	bsf	28,0	;volsfr
  3512  07A9                     l244:	
  3513                           ;vip.c: 688: while (EECON1bits.RD);
  3514                           
  3515  07A9  181C               	btfsc	28,0	;volsfr
  3516  07AA  2FA9               	goto	l244
  3517                           
  3518                           ;vip.c: 689: return (EEDATA);
  3519  07AB  081A               	movf	26,w	;volatile
  3520  07AC  0008               	return
  3521  07AD                     __end_of_Read_EEPROM:	
  3522                           
  3523                           	psect	text16
  3524  0654                     __ptext16:	
  3525 ;; *************** function _Duty_Pwm *****************
  3526 ;; Defined at:
  3527 ;;		line 409 in file "vip.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  value           2   12[BANK0 ] int 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  porcent         2   16[BANK0 ] int 
  3532 ;; Return value:  Size  Location     Type
  3533 ;;		None               void
  3534 ;; Registers used:
  3535 ;;		wreg, status,2, status,0, pclath, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3541 ;;      Params:         0       2       0       0
  3542 ;;      Locals:         0       2       0       0
  3543 ;;      Temps:          0       2       0       0
  3544 ;;      Totals:         0       6       0       0
  3545 ;;Total ram usage:        6 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    4
  3548 ;; This function calls:
  3549 ;;		___wmul
  3550 ;; This function is called by:
  3551 ;;		_Setup
  3552 ;;		_main
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           
  3557                           ;psect for function _Duty_Pwm
  3558  0654                     _Duty_Pwm:	
  3559                           
  3560                           ;vip.c: 411: int porcent;
  3561                           ;vip.c: 413: T2CONbits.TMR2ON = 0;
  3562                           
  3563                           ;incstack = 0
  3564                           ; Regs used in _Duty_Pwm: [wreg+status,2+status,0+pclath+cstack]
  3565  0654  1283               	bcf	3,5	;RP0=0, select bank0
  3566  0655  1303               	bcf	3,6	;RP1=0, select bank0
  3567  0656  1112               	bcf	18,2	;volatile
  3568                           
  3569                           ;vip.c: 415: porcent = (value * 10);
  3570  0657  082D               	movf	Duty_Pwm@value+1,w
  3571  0658  00A7               	movwf	___wmul@multiplier+1
  3572  0659  082C               	movf	Duty_Pwm@value,w
  3573  065A  00A6               	movwf	___wmul@multiplier
  3574  065B  300A               	movlw	10
  3575  065C  00A8               	movwf	___wmul@multiplicand
  3576  065D  3000               	movlw	0
  3577  065E  00A9               	movwf	___wmul@multiplicand+1
  3578  065F  26FD               	fcall	___wmul
  3579  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3580  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3581  0662  0827               	movf	?___wmul+1,w
  3582  0663  00B1               	movwf	Duty_Pwm@porcent+1
  3583  0664  0826               	movf	?___wmul,w
  3584  0665  00B0               	movwf	Duty_Pwm@porcent
  3585                           
  3586                           ;vip.c: 416: CCPR1L = porcent >> 2;
  3587  0666  0831               	movf	Duty_Pwm@porcent+1,w
  3588  0667  00AF               	movwf	??_Duty_Pwm+1
  3589  0668  0830               	movf	Duty_Pwm@porcent,w
  3590  0669  00AE               	movwf	??_Duty_Pwm
  3591  066A  0D2F               	rlf	??_Duty_Pwm+1,w
  3592  066B  0CAF               	rrf	??_Duty_Pwm+1,f
  3593  066C  0CAE               	rrf	??_Duty_Pwm,f
  3594  066D  0D2F               	rlf	??_Duty_Pwm+1,w
  3595  066E  0CAF               	rrf	??_Duty_Pwm+1,f
  3596  066F  0CAE               	rrf	??_Duty_Pwm,f
  3597  0670  082E               	movf	??_Duty_Pwm,w
  3598  0671  0095               	movwf	21	;volatile
  3599                           
  3600                           ;vip.c: 418: if (porcent & 0b00000010) {
  3601  0672  1CB0               	btfss	Duty_Pwm@porcent,1
  3602  0673  2E76               	goto	l168
  3603                           
  3604                           ;vip.c: 419: CCP1CONbits.CCP1X = 1;
  3605  0674  1697               	bsf	23,5	;volatile
  3606                           
  3607                           ;vip.c: 420: } else {
  3608  0675  2E77               	goto	l169
  3609  0676                     l168:	
  3610                           
  3611                           ;vip.c: 421: CCP1CONbits.CCP1X = 0;
  3612  0676  1297               	bcf	23,5	;volatile
  3613  0677                     l169:	
  3614                           
  3615                           ;vip.c: 422: }
  3616                           ;vip.c: 423: if (porcent & 0b0000001) {
  3617  0677  1C30               	btfss	Duty_Pwm@porcent,0
  3618  0678  2E7B               	goto	l170
  3619                           
  3620                           ;vip.c: 424: CCP1CONbits.CCP1Y = 1;
  3621  0679  1617               	bsf	23,4	;volatile
  3622                           
  3623                           ;vip.c: 425: } else {
  3624  067A  2E7C               	goto	l171
  3625  067B                     l170:	
  3626                           
  3627                           ;vip.c: 426: CCP1CONbits.CCP1Y = 0;
  3628  067B  1217               	bcf	23,4	;volatile
  3629  067C                     l171:	
  3630                           
  3631                           ;vip.c: 427: }
  3632                           ;vip.c: 430: T2CONbits.T2CKPS0 = 1;
  3633  067C  1412               	bsf	18,0	;volatile
  3634                           
  3635                           ;vip.c: 431: T2CONbits.T2CKPS1 = 0;
  3636  067D  1092               	bcf	18,1	;volatile
  3637                           
  3638                           ;vip.c: 432: T2CONbits.TMR2ON = 1;
  3639  067E  1512               	bsf	18,2	;volatile
  3640  067F  0008               	return
  3641  0680                     __end_of_Duty_Pwm:	
  3642                           
  3643                           	psect	text17
  3644  06FD                     __ptext17:	
  3645 ;; *************** function ___wmul *****************
  3646 ;; Defined at:
  3647 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  multiplier      2    6[BANK0 ] unsigned int 
  3650 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;  product         2   10[BANK0 ] unsigned int 
  3653 ;; Return value:  Size  Location     Type
  3654 ;;                  2    6[BANK0 ] unsigned int 
  3655 ;; Registers used:
  3656 ;;		wreg, status,2, status,0
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 0/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3662 ;;      Params:         0       4       0       0
  3663 ;;      Locals:         0       2       0       0
  3664 ;;      Temps:          0       0       0       0
  3665 ;;      Totals:         0       6       0       0
  3666 ;;Total ram usage:        6 bytes
  3667 ;; Hardware stack levels used:    1
  3668 ;; Hardware stack levels required when called:    3
  3669 ;; This function calls:
  3670 ;;		Nothing
  3671 ;; This function is called by:
  3672 ;;		_Duty_Pwm
  3673 ;;		_sprintf
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           
  3678                           ;psect for function ___wmul
  3679  06FD                     ___wmul:	
  3680                           
  3681                           ;incstack = 0
  3682                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3683  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  3684  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  3685  06FF  01AA               	clrf	___wmul@product
  3686  0700  01AB               	clrf	___wmul@product+1
  3687  0701                     l1536:	
  3688  0701  1C26               	btfss	___wmul@multiplier,0
  3689  0702  2F09               	goto	l375
  3690  0703  0828               	movf	___wmul@multiplicand,w
  3691  0704  07AA               	addwf	___wmul@product,f
  3692  0705  1803               	skipnc
  3693  0706  0AAB               	incf	___wmul@product+1,f
  3694  0707  0829               	movf	___wmul@multiplicand+1,w
  3695  0708  07AB               	addwf	___wmul@product+1,f
  3696  0709                     l375:	
  3697  0709  3001               	movlw	1
  3698  070A                     u1065:	
  3699  070A  1003               	clrc
  3700  070B  0DA8               	rlf	___wmul@multiplicand,f
  3701  070C  0DA9               	rlf	___wmul@multiplicand+1,f
  3702  070D  3EFF               	addlw	-1
  3703  070E  1D03               	skipz
  3704  070F  2F0A               	goto	u1065
  3705  0710  3001               	movlw	1
  3706  0711                     u1075:	
  3707  0711  1003               	clrc
  3708  0712  0CA7               	rrf	___wmul@multiplier+1,f
  3709  0713  0CA6               	rrf	___wmul@multiplier,f
  3710  0714  3EFF               	addlw	-1
  3711  0715  1D03               	skipz
  3712  0716  2F11               	goto	u1075
  3713  0717  0826               	movf	___wmul@multiplier,w
  3714  0718  0427               	iorwf	___wmul@multiplier+1,w
  3715  0719  1D03               	btfss	3,2
  3716  071A  2F01               	goto	l1536
  3717  071B  082B               	movf	___wmul@product+1,w
  3718  071C  00A7               	movwf	?___wmul+1
  3719  071D  082A               	movf	___wmul@product,w
  3720  071E  00A6               	movwf	?___wmul
  3721  071F  0008               	return
  3722  0720                     __end_of___wmul:	
  3723                           
  3724                           	psect	text18
  3725  0157                     __ptext18:	
  3726 ;; *************** function _interrupcao *****************
  3727 ;; Defined at:
  3728 ;;		line 323 in file "vip.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;		None               void
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3742 ;;      Params:         0       0       0       0
  3743 ;;      Locals:         0       0       0       0
  3744 ;;      Temps:          0       6       0       0
  3745 ;;      Totals:         0       6       0       0
  3746 ;;Total ram usage:        6 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    2
  3749 ;; This function calls:
  3750 ;;		_debounce
  3751 ;;		i1_Duty_Pwm
  3752 ;;		i1_Read_EEPROM
  3753 ;; This function is called by:
  3754 ;;		Interrupt level 1
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           
  3759                           ;psect for function _interrupcao
  3760  0157                     _interrupcao:	
  3761                           
  3762                           ;vip.c: 325: if (PIR1bits.RCIF == 1) {
  3763  0157  1E8C               	btfss	12,5	;volatile
  3764  0158  2964               	goto	i1l142
  3765                           
  3766                           ;vip.c: 326: INTCONbits.GIE = 0;
  3767  0159  138B               	bcf	11,7	;volatile
  3768                           
  3769                           ;vip.c: 327: reg = RCREG;
  3770  015A  081A               	movf	26,w	;volatile
  3771  015B  00A0               	movwf	??_interrupcao
  3772  015C  0820               	movf	??_interrupcao,w
  3773  015D  00D8               	movwf	_reg
  3774                           
  3775                           ;vip.c: 328: flag_serial = 1;
  3776  015E  16FC               	bsf	_flag_serial/(0+8),_flag_serial& (0+7)
  3777                           
  3778                           ;vip.c: 329: Flag_active = 1;
  3779  015F  147C               	bsf	_Flag_active/(0+8),_Flag_active& (0+7)
  3780                           
  3781                           ;vip.c: 330: RCREG = 0x00;
  3782  0160  019A               	clrf	26	;volatile
  3783                           
  3784                           ;vip.c: 331: PIR1bits.RCIF = 0;
  3785  0161  128C               	bcf	12,5	;volatile
  3786                           
  3787                           ;vip.c: 332: INTCONbits.GIE = 1;
  3788  0162  178B               	bsf	11,7	;volatile
  3789                           
  3790                           ;vip.c: 333: } else if (INTCONbits.T0IF) {
  3791  0163  2A77               	goto	i1l165
  3792  0164                     i1l142:	
  3793  0164  1D0B               	btfss	11,2	;volatile
  3794  0165  2A77               	goto	i1l165
  3795                           
  3796                           ;vip.c: 334: aux_tm0++;
  3797  0166  3001               	movlw	1
  3798  0167  07D2               	addwf	_aux_tm0,f
  3799  0168  1803               	skipnc
  3800  0169  0AD3               	incf	_aux_tm0+1,f
  3801  016A  3000               	movlw	0
  3802  016B  07D3               	addwf	_aux_tm0+1,f
  3803                           
  3804                           ;vip.c: 335: cnt_int_tmr0++;
  3805  016C  3001               	movlw	1
  3806  016D  07D4               	addwf	_cnt_int_tmr0,f
  3807  016E  1803               	skipnc
  3808  016F  0AD5               	incf	_cnt_int_tmr0+1,f
  3809  0170  3000               	movlw	0
  3810  0171  07D5               	addwf	_cnt_int_tmr0+1,f
  3811                           
  3812                           ;vip.c: 336: INTCONbits.T0IE = 0;
  3813  0172  128B               	bcf	11,5	;volatile
  3814                           
  3815                           ;vip.c: 338: if (debounce(PORTAbits.RA3)) {
  3816  0173  0C05               	rrf	5,w	;volatile
  3817  0174  00A0               	movwf	??_interrupcao
  3818  0175  0CA0               	rrf	??_interrupcao,f
  3819  0176  0C20               	rrf	??_interrupcao,w
  3820  0177  3901               	andlw	1
  3821  0178  2784               	fcall	_debounce
  3822  0179  1C03               	btfss	3,0
  3823  017A  299A               	goto	i1l2202
  3824                           
  3825                           ;vip.c: 339: aux_tm0 = 0;
  3826  017B  1283               	bcf	3,5	;RP0=0, select bank0
  3827  017C  1303               	bcf	3,6	;RP1=0, select bank0
  3828  017D  01D2               	clrf	_aux_tm0
  3829  017E  01D3               	clrf	_aux_tm0+1
  3830                           
  3831                           ;vip.c: 340: config++;
  3832  017F  3001               	movlw	1
  3833  0180  07D6               	addwf	_config,f
  3834  0181  1803               	skipnc
  3835  0182  0AD7               	incf	_config+1,f
  3836  0183  3000               	movlw	0
  3837  0184  07D7               	addwf	_config+1,f
  3838                           
  3839                           ;vip.c: 341: if (config > 5) {
  3840  0185  0857               	movf	_config+1,w
  3841  0186  3A80               	xorlw	128
  3842  0187  00FF               	movwf	127
  3843  0188  3080               	movlw	128
  3844  0189  027F               	subwf	127,w
  3845  018A  1D03               	skipz
  3846  018B  298E               	goto	u190_25
  3847  018C  3006               	movlw	6
  3848  018D  0256               	subwf	_config,w
  3849  018E                     u190_25:	
  3850  018E  1C03               	skipc
  3851  018F  2994               	goto	i1l2200
  3852                           
  3853                           ;vip.c: 342: config = 0;
  3854  0190  1283               	bcf	3,5	;RP0=0, select bank0
  3855  0191  1303               	bcf	3,6	;RP1=0, select bank0
  3856  0192  01D6               	clrf	_config
  3857  0193  01D7               	clrf	_config+1
  3858  0194                     i1l2200:	
  3859                           
  3860                           ;vip.c: 343: }
  3861                           ;vip.c: 344: display_config = 1;
  3862  0194  15FC               	bsf	_display_config/(0+8),_display_config& (0+7)
  3863  0195                     i1l147:	
  3864                           ;vip.c: 345: while (!PORTAbits.RA3);
  3865                           
  3866  0195  1283               	bcf	3,5	;RP0=0, select bank0
  3867  0196  1303               	bcf	3,6	;RP1=0, select bank0
  3868  0197  1985               	btfsc	5,3	;volatile
  3869  0198  2A22               	goto	i1l2244
  3870  0199  2995               	goto	i1l147
  3871  019A                     i1l2202:	
  3872                           ;vip.c: 346: } else if (debounce(PORTAbits.RA4)) {
  3873                           
  3874  019A  1283               	bcf	3,5	;RP0=0, select bank0
  3875  019B  1303               	bcf	3,6	;RP1=0, select bank0
  3876  019C  0E05               	swapf	5,w	;volatile
  3877  019D  3901               	andlw	1
  3878  019E  2784               	fcall	_debounce
  3879  019F  1C03               	btfss	3,0
  3880  01A0  2A22               	goto	i1l2244
  3881                           
  3882                           ;vip.c: 347: aux_tm0 = 0;
  3883  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  3884  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  3885  01A3  01D2               	clrf	_aux_tm0
  3886  01A4  01D3               	clrf	_aux_tm0+1
  3887                           
  3888                           ;vip.c: 348: if (config == 1) {
  3889  01A5  0356               	decf	_config,w
  3890  01A6  0457               	iorwf	_config+1,w
  3891  01A7  1D03               	btfss	3,2
  3892  01A8  29C6               	goto	i1l2216
  3893                           
  3894                           ;vip.c: 349: PWM_main_motor++;
  3895  01A9  3001               	movlw	1
  3896  01AA  07C8               	addwf	_PWM_main_motor,f
  3897  01AB  1803               	skipnc
  3898  01AC  0AC9               	incf	_PWM_main_motor+1,f
  3899  01AD  3000               	movlw	0
  3900  01AE  07C9               	addwf	_PWM_main_motor+1,f
  3901                           
  3902                           ;vip.c: 350: if (PWM_main_motor > 100) {
  3903  01AF  0849               	movf	_PWM_main_motor+1,w
  3904  01B0  3A80               	xorlw	128
  3905  01B1  00FF               	movwf	127
  3906  01B2  3080               	movlw	128
  3907  01B3  027F               	subwf	127,w
  3908  01B4  1D03               	skipz
  3909  01B5  29B8               	goto	u194_25
  3910  01B6  3065               	movlw	101
  3911  01B7  0248               	subwf	_PWM_main_motor,w
  3912  01B8                     u194_25:	
  3913  01B8  1C03               	skipc
  3914  01B9  29BE               	goto	i1l2214
  3915                           
  3916                           ;vip.c: 351: PWM_main_motor = 0;
  3917  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  3918  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  3919  01BC  01C8               	clrf	_PWM_main_motor
  3920  01BD  01C9               	clrf	_PWM_main_motor+1
  3921  01BE                     i1l2214:	
  3922                           
  3923                           ;vip.c: 352: }
  3924                           ;vip.c: 353: Duty_Pwm(PWM_main_motor);
  3925  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  3926  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  3927  01C0  0849               	movf	_PWM_main_motor+1,w
  3928  01C1  00F7               	movwf	i1Duty_Pwm@value+1
  3929  01C2  0848               	movf	_PWM_main_motor,w
  3930  01C3  00F6               	movwf	i1Duty_Pwm@value
  3931  01C4  2680               	fcall	i1_Duty_Pwm
  3932                           
  3933                           ;vip.c: 354: } else if (config == 2) {
  3934  01C5  2A21               	goto	i1l2242
  3935  01C6                     i1l2216:	
  3936  01C6  3002               	movlw	2
  3937  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  3938  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  3939  01C9  0656               	xorwf	_config,w
  3940  01CA  0457               	iorwf	_config+1,w
  3941  01CB  1D03               	btfss	3,2
  3942  01CC  29E3               	goto	i1l2224
  3943                           
  3944                           ;vip.c: 355: Time_main_motor++;
  3945  01CD  3001               	movlw	1
  3946  01CE  07CC               	addwf	_Time_main_motor,f
  3947  01CF  1803               	skipnc
  3948  01D0  0ACD               	incf	_Time_main_motor+1,f
  3949  01D1  3000               	movlw	0
  3950  01D2  07CD               	addwf	_Time_main_motor+1,f
  3951                           
  3952                           ;vip.c: 356: if (Time_main_motor > 255) {
  3953  01D3  084D               	movf	_Time_main_motor+1,w
  3954  01D4  3A80               	xorlw	128
  3955  01D5  00FF               	movwf	127
  3956  01D6  3081               	movlw	129
  3957  01D7  027F               	subwf	127,w
  3958  01D8  1D03               	skipz
  3959  01D9  29DC               	goto	u196_25
  3960  01DA  3000               	movlw	0
  3961  01DB  024C               	subwf	_Time_main_motor,w
  3962  01DC                     u196_25:	
  3963  01DC  1C03               	skipc
  3964  01DD  2A21               	goto	i1l2242
  3965                           
  3966                           ;vip.c: 357: Time_main_motor = 0;
  3967  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  3968  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  3969  01E0  01CC               	clrf	_Time_main_motor
  3970  01E1  01CD               	clrf	_Time_main_motor+1
  3971                           
  3972                           ;vip.c: 358: }
  3973                           ;vip.c: 359: } else if (config == 3) {
  3974  01E2  2A21               	goto	i1l2242
  3975  01E3                     i1l2224:	
  3976  01E3  3003               	movlw	3
  3977  01E4  0656               	xorwf	_config,w
  3978  01E5  0457               	iorwf	_config+1,w
  3979  01E6  1D03               	btfss	3,2
  3980  01E7  2A05               	goto	i1l2234
  3981                           
  3982                           ;vip.c: 360: PWM_motors++;
  3983  01E8  3001               	movlw	1
  3984  01E9  07CA               	addwf	_PWM_motors,f
  3985  01EA  1803               	skipnc
  3986  01EB  0ACB               	incf	_PWM_motors+1,f
  3987  01EC  3000               	movlw	0
  3988  01ED  07CB               	addwf	_PWM_motors+1,f
  3989                           
  3990                           ;vip.c: 361: if (PWM_motors > 100) {
  3991  01EE  084B               	movf	_PWM_motors+1,w
  3992  01EF  3A80               	xorlw	128
  3993  01F0  00FF               	movwf	127
  3994  01F1  3080               	movlw	128
  3995  01F2  027F               	subwf	127,w
  3996  01F3  1D03               	skipz
  3997  01F4  29F7               	goto	u198_25
  3998  01F5  3065               	movlw	101
  3999  01F6  024A               	subwf	_PWM_motors,w
  4000  01F7                     u198_25:	
  4001  01F7  1C03               	skipc
  4002  01F8  29FD               	goto	i1l2232
  4003                           
  4004                           ;vip.c: 362: PWM_motors = 0;
  4005  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  4006  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  4007  01FB  01CA               	clrf	_PWM_motors
  4008  01FC  01CB               	clrf	_PWM_motors+1
  4009  01FD                     i1l2232:	
  4010                           
  4011                           ;vip.c: 363: }
  4012                           ;vip.c: 364: Duty_Pwm(PWM_motors);
  4013  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  4014  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  4015  01FF  084B               	movf	_PWM_motors+1,w
  4016  0200  00F7               	movwf	i1Duty_Pwm@value+1
  4017  0201  084A               	movf	_PWM_motors,w
  4018  0202  00F6               	movwf	i1Duty_Pwm@value
  4019  0203  2680               	fcall	i1_Duty_Pwm
  4020                           
  4021                           ;vip.c: 365: } else if (config == 4) {
  4022  0204  2A21               	goto	i1l2242
  4023  0205                     i1l2234:	
  4024  0205  3004               	movlw	4
  4025  0206  1283               	bcf	3,5	;RP0=0, select bank0
  4026  0207  1303               	bcf	3,6	;RP1=0, select bank0
  4027  0208  0656               	xorwf	_config,w
  4028  0209  0457               	iorwf	_config+1,w
  4029  020A  1D03               	btfss	3,2
  4030  020B  2A21               	goto	i1l2242
  4031                           
  4032                           ;vip.c: 366: Time_motors++;
  4033  020C  3001               	movlw	1
  4034  020D  07CE               	addwf	_Time_motors,f
  4035  020E  1803               	skipnc
  4036  020F  0ACF               	incf	_Time_motors+1,f
  4037  0210  3000               	movlw	0
  4038  0211  07CF               	addwf	_Time_motors+1,f
  4039                           
  4040                           ;vip.c: 367: if (Time_motors > 255) {
  4041  0212  084F               	movf	_Time_motors+1,w
  4042  0213  3A80               	xorlw	128
  4043  0214  00FF               	movwf	127
  4044  0215  3081               	movlw	129
  4045  0216  027F               	subwf	127,w
  4046  0217  1D03               	skipz
  4047  0218  2A1B               	goto	u200_25
  4048  0219  3000               	movlw	0
  4049  021A  024E               	subwf	_Time_motors,w
  4050  021B                     u200_25:	
  4051  021B  1C03               	skipc
  4052  021C  2A21               	goto	i1l2242
  4053                           
  4054                           ;vip.c: 368: Time_motors = 0;
  4055  021D  1283               	bcf	3,5	;RP0=0, select bank0
  4056  021E  1303               	bcf	3,6	;RP1=0, select bank0
  4057  021F  01CE               	clrf	_Time_motors
  4058  0220  01CF               	clrf	_Time_motors+1
  4059  0221                     i1l2242:	
  4060                           
  4061                           ;vip.c: 369: }
  4062                           ;vip.c: 370: }
  4063                           ;vip.c: 371: display_value = 1;
  4064  0221  167C               	bsf	_display_value/(0+8),_display_value& (0+7)
  4065  0222                     i1l2244:	
  4066                           
  4067                           ;vip.c: 372: }
  4068                           ;vip.c: 375: if ((aux_tm0 == 100) && (config != 0)) {
  4069  0222  3064               	movlw	100
  4070  0223  1283               	bcf	3,5	;RP0=0, select bank0
  4071  0224  1303               	bcf	3,6	;RP1=0, select bank0
  4072  0225  0652               	xorwf	_aux_tm0,w
  4073  0226  0453               	iorwf	_aux_tm0+1,w
  4074  0227  1D03               	btfss	3,2
  4075  0228  2A5A               	goto	i1l2260
  4076  0229  0856               	movf	_config,w
  4077  022A  0457               	iorwf	_config+1,w
  4078  022B  1903               	btfsc	3,2
  4079  022C  2A5A               	goto	i1l2260
  4080                           
  4081                           ;vip.c: 376: config = 0;
  4082  022D  01D6               	clrf	_config
  4083  022E  01D7               	clrf	_config+1
  4084                           
  4085                           ;vip.c: 377: aux_tm0 = 0;
  4086  022F  01D2               	clrf	_aux_tm0
  4087  0230  01D3               	clrf	_aux_tm0+1
  4088                           
  4089                           ;vip.c: 378: display_config = 1;
  4090  0231  15FC               	bsf	_display_config/(0+8),_display_config& (0+7)
  4091                           
  4092                           ;vip.c: 381: PWM_main_motor = Read_EEPROM(0x00);
  4093  0232  3000               	movlw	0
  4094  0233  27AD               	fcall	i1_Read_EEPROM
  4095  0234  1283               	bcf	3,5	;RP0=0, select bank0
  4096  0235  1303               	bcf	3,6	;RP1=0, select bank0
  4097  0236  00A0               	movwf	??_interrupcao
  4098  0237  01A1               	clrf	??_interrupcao+1
  4099  0238  0820               	movf	??_interrupcao,w
  4100  0239  00C8               	movwf	_PWM_main_motor
  4101  023A  0821               	movf	??_interrupcao+1,w
  4102  023B  00C9               	movwf	_PWM_main_motor+1
  4103                           
  4104                           ;vip.c: 382: Time_main_motor = Read_EEPROM(0x01);
  4105  023C  3001               	movlw	1
  4106  023D  27AD               	fcall	i1_Read_EEPROM
  4107  023E  1283               	bcf	3,5	;RP0=0, select bank0
  4108  023F  1303               	bcf	3,6	;RP1=0, select bank0
  4109  0240  00A0               	movwf	??_interrupcao
  4110  0241  01A1               	clrf	??_interrupcao+1
  4111  0242  0820               	movf	??_interrupcao,w
  4112  0243  00CC               	movwf	_Time_main_motor
  4113  0244  0821               	movf	??_interrupcao+1,w
  4114  0245  00CD               	movwf	_Time_main_motor+1
  4115                           
  4116                           ;vip.c: 383: PWM_motors = Read_EEPROM(0x02);
  4117  0246  3002               	movlw	2
  4118  0247  27AD               	fcall	i1_Read_EEPROM
  4119  0248  1283               	bcf	3,5	;RP0=0, select bank0
  4120  0249  1303               	bcf	3,6	;RP1=0, select bank0
  4121  024A  00A0               	movwf	??_interrupcao
  4122  024B  01A1               	clrf	??_interrupcao+1
  4123  024C  0820               	movf	??_interrupcao,w
  4124  024D  00CA               	movwf	_PWM_motors
  4125  024E  0821               	movf	??_interrupcao+1,w
  4126  024F  00CB               	movwf	_PWM_motors+1
  4127                           
  4128                           ;vip.c: 384: Time_motors = Read_EEPROM(0x03);
  4129  0250  3003               	movlw	3
  4130  0251  27AD               	fcall	i1_Read_EEPROM
  4131  0252  1283               	bcf	3,5	;RP0=0, select bank0
  4132  0253  1303               	bcf	3,6	;RP1=0, select bank0
  4133  0254  00A0               	movwf	??_interrupcao
  4134  0255  01A1               	clrf	??_interrupcao+1
  4135  0256  0820               	movf	??_interrupcao,w
  4136  0257  00CE               	movwf	_Time_motors
  4137  0258  0821               	movf	??_interrupcao+1,w
  4138  0259  00CF               	movwf	_Time_motors+1
  4139  025A                     i1l2260:	
  4140                           
  4141                           ;vip.c: 385: }
  4142                           ;vip.c: 386: if ((cnt_int_tmr0 == Tmp_atividade) && (Flag_motors_off)) {
  4143  025A  0851               	movf	_Tmp_atividade+1,w
  4144  025B  0655               	xorwf	_cnt_int_tmr0+1,w
  4145  025C  1D03               	skipz
  4146  025D  2A60               	goto	u203_25
  4147  025E  0850               	movf	_Tmp_atividade,w
  4148  025F  0654               	xorwf	_cnt_int_tmr0,w
  4149  0260                     u203_25:	
  4150  0260  1903               	btfsc	3,2
  4151  0261  1D7C               	btfss	_Flag_motors_off/(0+8),_Flag_motors_off& (0+7)
  4152  0262  2A73               	goto	i1l2282
  4153                           
  4154                           ;vip.c: 387: cnt_int_tmr0 = 0;
  4155  0263  01D4               	clrf	_cnt_int_tmr0
  4156  0264  01D5               	clrf	_cnt_int_tmr0+1
  4157                           
  4158                           ;vip.c: 389: PORTAbits.RA0 = 0;
  4159  0265  1005               	bcf	5,0	;volatile
  4160                           
  4161                           ;vip.c: 390: PORTAbits.RA6 = 0;
  4162  0266  1305               	bcf	5,6	;volatile
  4163                           
  4164                           ;vip.c: 391: PORTAbits.RA7 = 0;
  4165  0267  1385               	bcf	5,7	;volatile
  4166                           
  4167                           ;vip.c: 392: PORTAbits.RA2 = 0;
  4168  0268  1105               	bcf	5,2	;volatile
  4169                           
  4170                           ;vip.c: 393: PORTAbits.RA1 = 0;
  4171  0269  1085               	bcf	5,1	;volatile
  4172                           
  4173                           ;vip.c: 396: Flag_motors_off = 0;
  4174  026A  117C               	bcf	_Flag_motors_off/(0+8),_Flag_motors_off& (0+7)
  4175                           
  4176                           ;vip.c: 397: reg = 0x00;
  4177  026B  01D8               	clrf	_reg
  4178                           
  4179                           ;vip.c: 398: RCREG = 0x00;
  4180  026C  019A               	clrf	26	;volatile
  4181                           
  4182                           ;vip.c: 399: PIE1bits.RCIE = 1;
  4183  026D  1683               	bsf	3,5	;RP0=1, select bank1
  4184  026E  1303               	bcf	3,6	;RP1=0, select bank1
  4185  026F  168C               	bsf	12,5	;volatile
  4186                           
  4187                           ;vip.c: 400: RCSTAbits.SPEN = 1;
  4188  0270  1283               	bcf	3,5	;RP0=0, select bank0
  4189  0271  1303               	bcf	3,6	;RP1=0, select bank0
  4190  0272  1798               	bsf	24,7	;volatile
  4191  0273                     i1l2282:	
  4192                           
  4193                           ;vip.c: 401: }
  4194                           ;vip.c: 403: TMR0 = 0x15;
  4195  0273  3015               	movlw	21
  4196  0274  0081               	movwf	1	;volatile
  4197                           
  4198                           ;vip.c: 404: INTCONbits.T0IF = 0;
  4199  0275  110B               	bcf	11,2	;volatile
  4200                           
  4201                           ;vip.c: 405: INTCONbits.T0IE = 1;
  4202  0276  168B               	bsf	11,5	;volatile
  4203  0277                     i1l165:	
  4204  0277  0825               	movf	??_interrupcao+5,w
  4205  0278  00FF               	movwf	127
  4206  0279  0824               	movf	??_interrupcao+4,w
  4207  027A  008A               	movwf	10
  4208  027B  0823               	movf	??_interrupcao+3,w
  4209  027C  0084               	movwf	4
  4210  027D  0E22               	swapf	(??_interrupcao+2)^0,w
  4211  027E  0083               	movwf	3
  4212  027F  0EFE               	swapf	126,f
  4213  0280  0E7E               	swapf	126,w
  4214  0281  0009               	retfie
  4215  0282                     __end_of_interrupcao:	
  4216                           
  4217                           	psect	intentry
  4218  0004                     __pintentry:	
  4219                           ;incstack = 0
  4220                           ; Regs used in _interrupcao: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4221                           
  4222  0004                     interrupt_function:	
  4223  007E                     saved_w	set	btemp
  4224  0004  00FE               	movwf	btemp
  4225  0005  0E03               	swapf	3,w
  4226  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4227  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4228  0008  00A2               	movwf	??_interrupcao+2
  4229  0009  0804               	movf	4,w
  4230  000A  00A3               	movwf	??_interrupcao+3
  4231  000B  080A               	movf	10,w
  4232  000C  00A4               	movwf	??_interrupcao+4
  4233  000D  087F               	movf	btemp+1,w
  4234  000E  00A5               	movwf	??_interrupcao+5
  4235  000F  2957               	ljmp	_interrupcao
  4236                           
  4237                           	psect	text19
  4238  07AD                     __ptext19:	
  4239 ;; *************** function i1_Read_EEPROM *****************
  4240 ;; Defined at:
  4241 ;;		line 685 in file "vip.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  addr            1    wreg     unsigned char 
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;  addr            1    0[COMMON] unsigned char 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      unsigned char 
  4248 ;; Registers used:
  4249 ;;		wreg
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4255 ;;      Params:         0       0       0       0
  4256 ;;      Locals:         1       0       0       0
  4257 ;;      Temps:          0       0       0       0
  4258 ;;      Totals:         1       0       0       0
  4259 ;;Total ram usage:        1 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; This function calls:
  4262 ;;		Nothing
  4263 ;; This function is called by:
  4264 ;;		_interrupcao
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           
  4269                           ;psect for function i1_Read_EEPROM
  4270  07AD                     i1_Read_EEPROM:	
  4271                           
  4272                           ;incstack = 0
  4273                           ; Regs used in i1_Read_EEPROM: [wreg]
  4274                           ;i1Read_EEPROM@addr stored from wreg
  4275  07AD  00F0               	movwf	i1Read_EEPROM@addr
  4276                           
  4277                           ;vip.c: 686: EEADR = addr;
  4278  07AE  0870               	movf	i1Read_EEPROM@addr,w
  4279  07AF  1683               	bsf	3,5	;RP0=1, select bank1
  4280  07B0  1303               	bcf	3,6	;RP1=0, select bank1
  4281  07B1  009B               	movwf	27	;volatile
  4282                           
  4283                           ;vip.c: 687: EECON1bits.RD = 1;
  4284  07B2  141C               	bsf	28,0	;volsfr
  4285  07B3                     i1l244:	
  4286                           ;vip.c: 688: while (EECON1bits.RD);
  4287                           
  4288  07B3  181C               	btfsc	28,0	;volsfr
  4289  07B4  2FB3               	goto	i1l244
  4290                           
  4291                           ;vip.c: 689: return (EEDATA);
  4292  07B5  081A               	movf	26,w	;volatile
  4293  07B6  0008               	return
  4294  07B7                     __end_ofi1_Read_EEPROM:	
  4295                           
  4296                           	psect	text20
  4297  0680                     __ptext20:	
  4298 ;; *************** function i1_Duty_Pwm *****************
  4299 ;; Defined at:
  4300 ;;		line 409 in file "vip.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  value           2    6[COMMON] int 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  Duty_Pwm        2   10[COMMON] int 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;		None               void
  4307 ;; Registers used:
  4308 ;;		wreg, status,2, status,0, pclath, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4314 ;;      Params:         2       0       0       0
  4315 ;;      Locals:         2       0       0       0
  4316 ;;      Temps:          2       0       0       0
  4317 ;;      Totals:         6       0       0       0
  4318 ;;Total ram usage:        6 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    1
  4321 ;; This function calls:
  4322 ;;		i1___wmul
  4323 ;; This function is called by:
  4324 ;;		_interrupcao
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           
  4329                           ;psect for function i1_Duty_Pwm
  4330  0680                     i1_Duty_Pwm:	
  4331                           
  4332                           ;vip.c: 411: int porcent;
  4333                           ;vip.c: 413: T2CONbits.TMR2ON = 0;
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in i1_Duty_Pwm: [wreg+status,2+status,0+pclath+cstack]
  4337  0680  1283               	bcf	3,5	;RP0=0, select bank0
  4338  0681  1303               	bcf	3,6	;RP1=0, select bank0
  4339  0682  1112               	bcf	18,2	;volatile
  4340                           
  4341                           ;vip.c: 415: porcent = (value * 10);
  4342  0683  0877               	movf	i1Duty_Pwm@value+1,w
  4343  0684  00F1               	movwf	i1___wmul@multiplier+1
  4344  0685  0876               	movf	i1Duty_Pwm@value,w
  4345  0686  00F0               	movwf	i1___wmul@multiplier
  4346  0687  300A               	movlw	10
  4347  0688  00F2               	movwf	i1___wmul@multiplicand
  4348  0689  3000               	movlw	0
  4349  068A  00F3               	movwf	i1___wmul@multiplicand+1
  4350  068B  2720               	fcall	i1___wmul
  4351  068C  0871               	movf	?i1___wmul+1,w
  4352  068D  00FB               	movwf	i1Duty_Pwm@porcent+1
  4353  068E  0870               	movf	?i1___wmul,w
  4354  068F  00FA               	movwf	i1Duty_Pwm@porcent
  4355                           
  4356                           ;vip.c: 416: CCPR1L = porcent >> 2;
  4357  0690  087B               	movf	i1Duty_Pwm@porcent+1,w
  4358  0691  00F9               	movwf	??i1_Duty_Pwm+1
  4359  0692  087A               	movf	i1Duty_Pwm@porcent,w
  4360  0693  00F8               	movwf	??i1_Duty_Pwm
  4361  0694  0D79               	rlf	??i1_Duty_Pwm+1,w
  4362  0695  0CF9               	rrf	??i1_Duty_Pwm+1,f
  4363  0696  0CF8               	rrf	??i1_Duty_Pwm,f
  4364  0697  0D79               	rlf	??i1_Duty_Pwm+1,w
  4365  0698  0CF9               	rrf	??i1_Duty_Pwm+1,f
  4366  0699  0CF8               	rrf	??i1_Duty_Pwm,f
  4367  069A  0878               	movf	??i1_Duty_Pwm,w
  4368  069B  1283               	bcf	3,5	;RP0=0, select bank0
  4369  069C  1303               	bcf	3,6	;RP1=0, select bank0
  4370  069D  0095               	movwf	21	;volatile
  4371                           
  4372                           ;vip.c: 418: if (porcent & 0b00000010) {
  4373  069E  1CFA               	btfss	i1Duty_Pwm@porcent,1
  4374  069F  2EA2               	goto	i1l168
  4375                           
  4376                           ;vip.c: 419: CCP1CONbits.CCP1X = 1;
  4377  06A0  1697               	bsf	23,5	;volatile
  4378                           
  4379                           ;vip.c: 420: } else {
  4380  06A1  2EA3               	goto	i1l169
  4381  06A2                     i1l168:	
  4382                           
  4383                           ;vip.c: 421: CCP1CONbits.CCP1X = 0;
  4384  06A2  1297               	bcf	23,5	;volatile
  4385  06A3                     i1l169:	
  4386                           
  4387                           ;vip.c: 422: }
  4388                           ;vip.c: 423: if (porcent & 0b0000001) {
  4389  06A3  1C7A               	btfss	i1Duty_Pwm@porcent,0
  4390  06A4  2EA7               	goto	i1l170
  4391                           
  4392                           ;vip.c: 424: CCP1CONbits.CCP1Y = 1;
  4393  06A5  1617               	bsf	23,4	;volatile
  4394                           
  4395                           ;vip.c: 425: } else {
  4396  06A6  2EA8               	goto	i1l171
  4397  06A7                     i1l170:	
  4398                           
  4399                           ;vip.c: 426: CCP1CONbits.CCP1Y = 0;
  4400  06A7  1217               	bcf	23,4	;volatile
  4401  06A8                     i1l171:	
  4402                           
  4403                           ;vip.c: 427: }
  4404                           ;vip.c: 430: T2CONbits.T2CKPS0 = 1;
  4405  06A8  1412               	bsf	18,0	;volatile
  4406                           
  4407                           ;vip.c: 431: T2CONbits.T2CKPS1 = 0;
  4408  06A9  1092               	bcf	18,1	;volatile
  4409                           
  4410                           ;vip.c: 432: T2CONbits.TMR2ON = 1;
  4411  06AA  1512               	bsf	18,2	;volatile
  4412  06AB  0008               	return
  4413  06AC                     __end_ofi1_Duty_Pwm:	
  4414                           
  4415                           	psect	text21
  4416  0720                     __ptext21:	
  4417 ;; *************** function i1___wmul *****************
  4418 ;; Defined at:
  4419 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;  multiplier      2    0[COMMON] unsigned int 
  4422 ;;  multiplicand    2    2[COMMON] unsigned int 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  __wmul          2    4[COMMON] unsigned int 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  2    0[COMMON] unsigned int 
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4434 ;;      Params:         4       0       0       0
  4435 ;;      Locals:         2       0       0       0
  4436 ;;      Temps:          0       0       0       0
  4437 ;;      Totals:         6       0       0       0
  4438 ;;Total ram usage:        6 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		i1_Duty_Pwm
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           
  4448                           ;psect for function i1___wmul
  4449  0720                     i1___wmul:	
  4450                           
  4451                           ;incstack = 0
  4452                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  4453  0720  01F4               	clrf	i1___wmul@product
  4454  0721  01F5               	clrf	i1___wmul@product+1
  4455  0722                     i1l1808:	
  4456  0722  1C70               	btfss	i1___wmul@multiplier,0
  4457  0723  2F2A               	goto	i1l375
  4458  0724  0872               	movf	i1___wmul@multiplicand,w
  4459  0725  07F4               	addwf	i1___wmul@product,f
  4460  0726  1803               	skipnc
  4461  0727  0AF5               	incf	i1___wmul@product+1,f
  4462  0728  0873               	movf	i1___wmul@multiplicand+1,w
  4463  0729  07F5               	addwf	i1___wmul@product+1,f
  4464  072A                     i1l375:	
  4465  072A  3001               	movlw	1
  4466  072B                     u147_25:	
  4467  072B  1003               	clrc
  4468  072C  0DF2               	rlf	i1___wmul@multiplicand,f
  4469  072D  0DF3               	rlf	i1___wmul@multiplicand+1,f
  4470  072E  3EFF               	addlw	-1
  4471  072F  1D03               	skipz
  4472  0730  2F2B               	goto	u147_25
  4473  0731  3001               	movlw	1
  4474  0732                     u148_25:	
  4475  0732  1003               	clrc
  4476  0733  0CF1               	rrf	i1___wmul@multiplier+1,f
  4477  0734  0CF0               	rrf	i1___wmul@multiplier,f
  4478  0735  3EFF               	addlw	-1
  4479  0736  1D03               	skipz
  4480  0737  2F32               	goto	u148_25
  4481  0738  0870               	movf	i1___wmul@multiplier,w
  4482  0739  0471               	iorwf	i1___wmul@multiplier+1,w
  4483  073A  1D03               	btfss	3,2
  4484  073B  2F22               	goto	i1l1808
  4485  073C  0875               	movf	i1___wmul@product+1,w
  4486  073D  00F1               	movwf	?i1___wmul+1
  4487  073E  0874               	movf	i1___wmul@product,w
  4488  073F  00F0               	movwf	?i1___wmul
  4489  0740  0008               	return
  4490  0741                     __end_ofi1___wmul:	
  4491                           
  4492                           	psect	text22
  4493  0784                     __ptext22:	
  4494 ;; *************** function _debounce *****************
  4495 ;; Defined at:
  4496 ;;		line 692 in file "vip.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;  button          1    wreg     unsigned char 
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  button          1    2[COMMON] unsigned char 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;		None               void
  4503 ;; Registers used:
  4504 ;;		wreg, status,2, status,0
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4510 ;;      Params:         0       0       0       0
  4511 ;;      Locals:         1       0       0       0
  4512 ;;      Temps:          2       0       0       0
  4513 ;;      Totals:         3       0       0       0
  4514 ;;Total ram usage:        3 bytes
  4515 ;; Hardware stack levels used:    1
  4516 ;; This function calls:
  4517 ;;		Nothing
  4518 ;; This function is called by:
  4519 ;;		_interrupcao
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _debounce
  4525  0784                     _debounce:	
  4526                           
  4527                           ;incstack = 0
  4528                           ; Regs used in _debounce: [wreg+status,2+status,0]
  4529                           ;debounce@button stored from wreg
  4530  0784  00F2               	movwf	debounce@button
  4531                           
  4532                           ;vip.c: 693: _delay((unsigned long)((30)*(4000000/4000.0)));
  4533  0785  3027               	movlw	39
  4534  0786  00F1               	movwf	??_debounce+1
  4535  0787  30F5               	movlw	245
  4536  0788  00F0               	movwf	??_debounce
  4537  0789                     u215_27:	
  4538  0789  0BF0               	decfsz	??_debounce,f
  4539  078A  2F89               	goto	u215_27
  4540  078B  0BF1               	decfsz	??_debounce+1,f
  4541  078C  2F89               	goto	u215_27
  4542                           
  4543                           ;vip.c: 694: if (button == 0) {
  4544  078D  0872               	movf	debounce@button,w
  4545  078E  1D03               	btfss	3,2
  4546  078F  2F92               	goto	i1l2054
  4547                           
  4548                           ;vip.c: 695: return 1;
  4549  0790  1403               	setc
  4550                           
  4551                           ;vip.c: 696: } else {
  4552  0791  0008               	return
  4553  0792                     i1l2054:	
  4554                           
  4555                           ;vip.c: 697: return 0;
  4556  0792  1003               	clrc
  4557  0793  0008               	return
  4558  0794                     __end_of_debounce:	
  4559  007E                     btemp	set	126	;btemp
  4560  007E                     wtemp	set	126
  4561  007E                     wtemp0	set	126
  4562  0080                     wtemp1	set	128
  4563  0082                     wtemp2	set	130
  4564  0084                     wtemp3	set	132
  4565  0086                     wtemp4	set	134
  4566  0088                     wtemp5	set	136
  4567  007F                     wtemp6	set	127
  4568  007E                     ttemp	set	126
  4569  007E                     ttemp0	set	126
  4570  0081                     ttemp1	set	129
  4571  0084                     ttemp2	set	132
  4572  0087                     ttemp3	set	135
  4573  007F                     ttemp4	set	127
  4574  007E                     ltemp	set	126
  4575  007E                     ltemp0	set	126
  4576  0082                     ltemp1	set	130
  4577  0086                     ltemp2	set	134
  4578  0080                     ltemp3	set	128


Data Sizes:
    Strings     4
    Constant    10
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     38      61
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> Matrix_Char(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupcao in COMMON

    _interrupcao->i1_Duty_Pwm
    i1_Duty_Pwm->i1___wmul

Critical Paths under _main in BANK0

    _exibe_recebimento->_lcd_comando
    _exibe_recebimento->_lcd_escrevedado
    _exibe_configuracao->_Write_EEPROM
    _exibe_config_valor->_IntToChar
    _IntToChar->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Setup->_Duty_Pwm
    _inicializa_lcd->_lcd_comando
    _exibe_status->_lcd_comando
    _exibe_status->_lcd_escrevedado
    _Duty_Pwm->___wmul

Critical Paths under _interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupcao in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcao in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4881
                           _Duty_Pwm
                              _Setup
                 _exibe_config_valor
                 _exibe_configuracao
                  _exibe_recebimento
 ---------------------------------------------------------------------------------
 (1) _exibe_recebimento                                    0     0      0      88
                        _lcd_comando
                    _lcd_escrevedado
 ---------------------------------------------------------------------------------
 (1) _exibe_configuracao                                   3     3      0     720
                                             12 BANK0      3     3      0
                       _Write_EEPROM
                       _exibe_status
                        _lcd_comando
                    _lcd_escrevedado
 ---------------------------------------------------------------------------------
 (1) _exibe_config_valor                                   0     0      0    2057
                          _IntToChar
                        _lcd_comando
                    _lcd_escrevedado
 ---------------------------------------------------------------------------------
 (2) _IntToChar                                            3     1      2    1969
                                             35 BANK0      3     1      2
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             23    20      3    1735
                                             20 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                             14 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     268
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Setup                                                2     2      0    1357
                                             18 BANK0      2     2      0
                           _Duty_Pwm
                        _Read_EEPROM
                       _Write_EEPROM
                       _exibe_status
                     _inicializa_lcd
 ---------------------------------------------------------------------------------
 (2) _inicializa_lcd                                       2     2      0      44
                                              9 BANK0      2     2      0
                        _lcd_comando
 ---------------------------------------------------------------------------------
 (2) _exibe_status                                         0     0      0      88
                        _lcd_comando
                    _lcd_escrevedado
 ---------------------------------------------------------------------------------
 (2) _lcd_escrevedado                                      3     3      0      44
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comando                                          3     3      0      44
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Write_EEPROM                                         6     5      1     544
                                              6 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _Read_EEPROM                                          1     1      0      22
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Duty_Pwm                                             6     4      2     659
                                             12 BANK0      6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     304
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interrupcao                                          6     6      0     329
                                              0 BANK0      6     6      0
                           _debounce
                         i1_Duty_Pwm
                      i1_Read_EEPROM
 ---------------------------------------------------------------------------------
 (6) i1_Read_EEPROM                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_Duty_Pwm                                           6     4      2     285
                                              6 COMMON     6     4      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) _debounce                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Duty_Pwm
     ___wmul
   _Setup
     _Duty_Pwm
       ___wmul
     _Read_EEPROM
     _Write_EEPROM
     _exibe_status
       _lcd_comando
       _lcd_escrevedado
     _inicializa_lcd
       _lcd_comando
   _exibe_config_valor
     _IntToChar
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _lcd_comando
     _lcd_escrevedado
   _exibe_configuracao
     _Write_EEPROM
     _exibe_status
       _lcd_comando
       _lcd_escrevedado
     _lcd_comando
     _lcd_escrevedado
   _exibe_recebimento
     _lcd_comando
     _lcd_escrevedado

 _interrupcao (ROOT)
   _debounce
   i1_Duty_Pwm
     i1___wmul
   i1_Read_EEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     26      3D       3       76.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      4A      10        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 29 14:10:38 2015

                               pc 0002                       __CFG_CP$OFF 0000                                fsr 0004  
             ___wmul@multiplicand 0028                  i1___wmul@product 0074                               l122 036C  
                             l131 03BE                               l133 03D1                               l126 03D7  
                             l119 03D8                               l170 067B                               l171 067C  
                             l244 07A9                               l237 06CA                               l168 0676  
                             l280 00CE                               l169 0677                               l375 0709  
                             _PR2 0092                      __CFG_CPD$OFF 0000                               _reg 0058  
                             fsr0 0004                               indf 0000             __size_of_Write_EEPROM 0029  
                      _PWM_motors 004A                      __CFG_LVP$OFF 0000                              l2010 050D  
                            l2020 052F                              l2100 035B                              l2014 0519  
                            l2024 053A                              l2032 0551                              l2016 0525  
                            l2008 0507                              l2104 0364                              l2112 0372  
                            l2028 0545                              l2160 03C7                              l2136 0396  
                            l2080 033A                              l1530 0782                              l1700 00F5  
                            l2166 03DB                              l2086 033E                              l1536 0701  
                            l1560 057E                              l1720 011D                              l1712 0119  
                            l1570 059F                              l1706 010A                              l1722 0020  
                            l1724 0150                              l1566 0594                              l1558 0570  
                            l1582 0628                              l1654 004B                              l1584 0636  
                            l1592 064F                              l1664 0075                              l1648 003E  
                            l1682 00A7                              l1666 0088                              l1588 0644  
                            l1676 00A1                              l1950 04BB                              l1942 0493  
                            l1696 00ED                              l1688 00C0                              l1960 04DF  
                            l1698 00F1                              l1954 04C7                              l1946 04A7  
                            l1962 04F3                              l1884 02E8                              l1980 042A  
                            l1972 0400                              l1798 06E2                              l1974 040D  
                            l1992 046E                              l1994 0474                              l1978 0419  
                            l1996 0475                              STR_1 0770                              u1105 0573  
                            u1125 057F                              u1205 0645                              u1135 058B  
                            u1065 070A                              u1225 0606                              u1145 0595  
                            u1075 0711                              u2107 05DF                              u1235 05C8  
                            u2117 05E8                              u2127 05F9                              u1175 062B  
                            u1335 00DD                              u2137 0614                              u2057 0466  
                            u2147 061D                              u2067 074A                              u1195 063C  
                            u2077 05AA                              u2087 05BB                              u1295 00B6  
                            u2097 05D6                              u1815 0392                              u1835 03B6  
                            _TMR0 0001                              _main 0339                              btemp 007E  
                   ??_Read_EEPROM 0026                              ltemp 007E                              start 0010  
                            ttemp 007E                              wtemp 007E                     __CFG_MCLRE$ON 0000  
                    _Write_EEPROM 06AC                _exibe_config_valor 04F7                             ?_main 0070  
                           _EEADR 009B                     __CFG_WDTE$OFF 0000                             _CMCON 001F  
                 __end_of___lwdiv 05A4                             i1l142 0164                             i1l170 06A7  
                           i1l171 06A8                             i1l147 0195                             i1l244 07B3  
                           i1l165 0277                             i1l168 06A2                             i1l169 06A3  
                 __end_of___lwmod 0654                             i1l375 072A                             _RCREG 001A  
                           _SPBRG 0099                             _PORTA 0005                             _PORTB 0006  
                           _TRISA 0085                             _TRISB 0086                _exibe_configuracao 03DF  
             ?_exibe_config_valor 0070                             _Setup 0282                   __end_of_dpowers 0770  
                 __end_of_isdigit 0784               ?_exibe_configuracao 0070                    __pbitbssCOMMON 03E0  
                  __CFG_BOREN$OFF 0000                       ?i1_Duty_Pwm 0076                             pclath 000A  
                __end_ofi1___wmul 0741                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003               i1___wmul@multiplier 0070  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F                   __end_of_sprintf 0157              ??_exibe_config_valor 0046  
                 __initialization 0011                      ?_interrupcao 0070                      __end_of_main 03DF  
             __end_of_Read_EEPROM 07AD              ??_exibe_configuracao 002C                  __end_of_Duty_Pwm 0680  
                     _Flag_active 03E0                     ?_exibe_status 0070                            ??_main 0046  
                          ?_Setup 0070                            _EEDATA 009A                            _CCPR1L 0015  
                          _EECON2 009D                            i1l2200 0194                            i1l2202 019A  
                          i1l2054 0792                            i1l2214 01BE                            i1l2232 01FD  
                          i1l2224 01E3                            i1l2216 01C6                            i1l2234 0205  
                          i1l2242 0221                            i1l2260 025A                            i1l2244 0222  
                          u200_25 021B                            i1l2282 0273                            i1l1808 0722  
                          u203_25 0260                            u215_27 0789                            u147_25 072B  
                          u148_25 0732                            u190_25 018E                            u194_25 01B8  
                          u196_25 01DC                            u198_25 01F7                __size_of_IntToChar 000D  
         __size_of_inicializa_lcd 001F                  __end_of_debounce 0794                    __CFG_PWRTE$OFF 0000  
                    _Active_motor 0046              __size_of_lcd_comando 003E                            ___wmul 06FD  
                       ??___lwdiv 002A                         ??___lwmod 0032                            _config 0056  
                  ??_exibe_status 0029               __size_ofi1_Duty_Pwm 002C                         ??_isdigit 0026  
                          saved_w 007E                    _Flag_conectado 03E1                         ??_sprintf 0037  
         __end_of__initialization 0017                       _Read_EEPROM 07A1                    __pcstackCOMMON 0070  
                   __end_of_Setup 0339          __size_of_lcd_escrevedado 003E                 __end_of_IntToChar 07A1  
                       ?i1___wmul 0070                    _OPTION_REGbits 0081                   lcd_comando@dado 0028  
                     _Matrix_Char 0059                           ??_Setup 0032                      sprintf@width 0040  
                      __pbssBANK0 0046                         ?_Duty_Pwm 002C             __end_ofi1_Read_EEPROM 07B7  
                 Read_EEPROM@addr 0026                        __pmaintext 0339                           ?___wmul 0026  
                      __pintentry 0004              __size_of_interrupcao 012B                        ??i1___wmul 0074  
                       ?_debounce 0070                        __stringtab 0760                      ??i1_Duty_Pwm 0078  
                  _inicializa_lcd 0741              __end_of_exibe_status 06FD                        ??_Duty_Pwm 002E  
                 __size_of___wmul 0023                           ___lwdiv 0566                           ___lwmod 0620  
                         __ptext1 047A                           __ptext2 03DF                           __ptext3 04F7  
                         __ptext4 0794                           __ptext5 0019                           __ptext6 0774  
                         __ptext7 0620                           __ptext8 0566                           __ptext9 0282  
                     _Time_motors 004E                __end_ofi1_Duty_Pwm 06AC                           _aux_tm0 0052  
               i1Duty_Pwm@porcent 007A                           _dpowers 0766                         _T2CONbits 0012  
               ??_lcd_escrevedado 0026                           _isdigit 0774                        ??_debounce 0070  
                         _sprintf 0019                           clrloop0 07B8            __end_of_inicializa_lcd 0760  
            end_of_initialization 0017                    _PWM_main_motor 0048       __size_of_exibe_config_valor 006F  
                       _RCSTAbits 0018       __size_of_exibe_configuracao 009B             i1___wmul@multiplicand 0072  
                    _cnt_int_tmr0 0054                         _PORTAbits 0005                         _PORTBbits 0006  
                 ?_inicializa_lcd 0070                       _CCP1CONbits 0017                         _TXSTAbits 0098  
                   ??_lcd_comando 0026                      ?_Read_EEPROM 0070                    __end_of___wmul 0720  
             start_initialization 0011                 __size_ofi1___wmul 0021                         _IntToChar 0794  
           __size_of_exibe_status 0028                   _Flag_motors_off 03E2                 __size_of_Duty_Pwm 002C  
                        ??___wmul 002A               __end_of_lcd_comando 0620                     ?_Write_EEPROM 0026  
                 _Time_main_motor 004C                      _exibe_status 06D5                         ___latbits 0000  
                      ?_IntToChar 0043                     __pcstackBANK0 0020                  Write_EEPROM@addr 002B  
                Write_EEPROM@data 0026                 __size_of_debounce 0010                       sprintf@flag 003C  
                     sprintf@prec 003B                 _exibe_recebimento 047A                  ___lwdiv@dividend 0028  
                   ??_interrupcao 0020                ?_exibe_recebimento 0070                    IntToChar@value 0043  
                 _lcd_escrevedado 05A4                    ??_Write_EEPROM 0027                          ?___lwdiv 0026  
                        ?___lwmod 002E               ??_exibe_recebimento 0029                         __pstrings 0760  
                        ?_isdigit 0070  Write_EEPROM@aux_Global_interrupt 0029            __size_ofi1_Read_EEPROM 000A  
                  __size_of_Setup 00B7                       _flag_serial 03E5                  ___lwdiv@quotient 002B  
                        ?_sprintf 0034                     Duty_Pwm@value 002C         __end_of_exibe_recebimento 04F7  
               interrupt_function 0004                    ___wmul@product 002A               lcd_escrevedado@dado 0028  
                       clear_ram0 07B7                          _PIE1bits 008C                       _lcd_comando 05E2  
                        _PIR1bits 000C              __size_of_Read_EEPROM 000C               __end_of_interrupcao 0282  
                     __stringbase 0765                 ___wmul@multiplier 0026                          i1___wmul 0720  
                ??_inicializa_lcd 0029                       ??_IntToChar 0045           __end_of_lcd_escrevedado 05E2  
                        _Duty_Pwm 0654                        _EECON1bits 009C        __end_of_exibe_config_valor 0566  
                   i1_Read_EEPROM 07AD        __end_of_exibe_configuracao 047A                  __size_of___lwdiv 003E  
                __size_of___lwmod 0034                __end_of__stringtab 0766                       _isdigit$702 0026  
                   _Tmp_atividade 0050                        sprintf@val 003D                          _debounce 0784  
                __size_of_isdigit 0010                   Duty_Pwm@porcent 0030                   ___lwdiv@divisor 0026  
                 ___lwdiv@counter 002D                          __ptext10 0741                          __ptext11 06D5  
                        __ptext20 0680                          __ptext12 05A4                          __ptext21 0720  
                        __ptext13 05E2                          __ptext22 0784                          __ptext14 06AC  
                        __ptext15 07A1                          __ptext16 0654                          __ptext17 06FD  
                        __ptext18 0157                          __ptext19 07AD              __end_of_Write_EEPROM 06D5  
                __size_of_sprintf 013E        __size_of_exibe_recebimento 007D                     __size_of_main 00A6  
                 i1Duty_Pwm@value 0076                    ?i1_Read_EEPROM 0070                       _interrupcao 0157  
                  debounce@button 0072                        _INTCONbits 000B                          isdigit@c 0027  
                        intlevel1 0000                         sprintf@ap 003A                         sprintf@sp 003F  
                ___lwmod@dividend 0030                 i1Read_EEPROM@addr 0070                  ?_lcd_escrevedado 0070  
                       stringcode 0760                          sprintf@c 0042                          sprintf@f 0034  
                 ___lwmod@divisor 002E                    _display_config 03E3                   ___lwmod@counter 0033  
                        stringdir 0760                          stringtab 0760                __CFG_FOSC$INTOSCIO 0000  
                      i1_Duty_Pwm 0680                   ??i1_Read_EEPROM 0070                     _display_value 03E4  
                    ?_lcd_comando 0070  
